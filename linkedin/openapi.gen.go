// Package x provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package linkedin

import (
	"encoding/json"

	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// Defines values for CompanyType.
const (
	EDUCATIONAL      CompanyType = "EDUCATIONAL"
	GOVERNMENTAGENCY CompanyType = "GOVERNMENT_AGENCY"
	NONPROFIT        CompanyType = "NON_PROFIT"
	PARTNERSHIP      CompanyType = "PARTNERSHIP"
	PRIVATELYHELD    CompanyType = "PRIVATELY_HELD"
	PUBLICCOMPANY    CompanyType = "PUBLIC_COMPANY"
	SELFEMPLOYED     CompanyType = "SELF_EMPLOYED"
	SELFOWNED        CompanyType = "SELF_OWNED"
)

// AccomplishmentOrg defines model for AccomplishmentOrg.
type AccomplishmentOrg struct {
	Description *string `json:"description"`
	EndsAt      *Date   `json:"ends_at,omitempty"`
	OrgName     *string `json:"org_name"`
	StartsAt    *Date   `json:"starts_at,omitempty"`
	Title       *string `json:"title"`
}

// AcquiredCompany defines model for AcquiredCompany.
type AcquiredCompany struct {
	AnnouncedDate *Date `json:"announced_date,omitempty"`

	// CrunchbaseProfileUrl Crunchbase Profile URL of company that was involved
	CrunchbaseProfileUrl *string `json:"crunchbase_profile_url"`

	// LinkedinProfileUrl
	//         LinkedIn Company Profile URL of company that was involved
	//
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`

	// Price Price of acquisition
	Price *int `json:"price"`
}

// Acquisition defines model for Acquisition.
type Acquisition struct {
	Acquired   *[]AcquiredCompany `json:"acquired,omitempty"`
	AcquiredBy *Acquisitor        `json:"acquired_by,omitempty"`
}

// Acquisitor defines model for Acquisitor.
type Acquisitor struct {
	AnnouncedDate *Date `json:"announced_date,omitempty"`

	// CrunchbaseProfileUrl Crunchbase Profile URL of company that was involved
	CrunchbaseProfileUrl *string `json:"crunchbase_profile_url"`

	// LinkedinProfileUrl
	//         LinkedIn Company Profile URL of company that was involved
	//
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`

	// Price Price of acquisition
	Price *int `json:"price"`
}

// Activity defines model for Activity.
type Activity struct {
	ActivityStatus *string `json:"activity_status"`
	Link           *string `json:"link"`
	Title          *string `json:"title"`
}

// AffiliatedCompany defines model for AffiliatedCompany.
type AffiliatedCompany struct {
	Industry *string `json:"industry"`
	Link     *string `json:"link"`
	Location *string `json:"location"`
	Name     *string `json:"name"`
}

// Article defines model for Article.
type Article struct {
	Author        *string `json:"author"`
	ImageUrl      *string `json:"image_url"`
	Link          *string `json:"link"`
	PublishedDate *Date   `json:"published_date,omitempty"`
	Title         *string `json:"title"`
}

// CSearchResult defines model for CSearchResult.
type CSearchResult struct {
	// LastUpdated
	//         ISO 8601 timestamp since the enriched profile was last scraped.
	//
	LastUpdated *string `json:"last_updated"`

	// LinkedinProfileUrl
	//         The LinkedIn Profile URL of the company
	//
	LinkedinProfileUrl *string          `json:"linkedin_profile_url,omitempty"`
	Profile            *LinkedinCompany `json:"profile,omitempty"`
}

// Certification defines model for Certification.
type Certification struct {
	// Authority The organisation body issuing this certificate.
	Authority     *string `json:"authority"`
	DisplaySource *string `json:"display_source"`
	EndsAt        *Date   `json:"ends_at,omitempty"`
	LicenseNumber *string `json:"license_number"`

	// Name Name of the course or program.
	Name     *string `json:"name"`
	StartsAt *Date   `json:"starts_at,omitempty"`
	Url      *string `json:"url"`
}

// CompanyCustomer defines model for CompanyCustomer.
type CompanyCustomer struct {
	// Email General Email address of company (if any)
	Email *string `json:"email"`

	// LinkedinCompanyProfileUrl LinkedIn Company Profile URL of a probable customer
	LinkedinCompanyProfileUrl *string `json:"linkedin_company_profile_url,omitempty"`

	// TwitterProfileUrl Twitter Profile URL of a probable customer
	TwitterProfileUrl *string `json:"twitter_profile_url"`
}

// CompanyDetails defines model for CompanyDetails.
type CompanyDetails struct {
	// CompanyType Type of company
	CompanyType *string `json:"company_type"`

	// ContactEmail General contact email of the company
	ContactEmail *string `json:"contact_email"`

	// CrunchbaseProfileUrl Crunchbase Profile URL of the company
	CrunchbaseProfileUrl *string `json:"crunchbase_profile_url"`

	// CrunchbaseRank A measure of prominence of this company by Crunchbase
	CrunchbaseRank *int `json:"crunchbase_rank"`

	// FacebookId ID of the company's official Facebook account
	FacebookId   *string `json:"facebook_id"`
	FoundingDate *Date   `json:"founding_date,omitempty"`
	IpoDate      *Date   `json:"ipo_date,omitempty"`

	// IpoStatus IPO status of the company
	IpoStatus *string `json:"ipo_status"`

	// NumberOfAcquisitions Total companies acquired by this company
	NumberOfAcquisitions *int `json:"number_of_acquisitions"`

	// NumberOfExits Total exits by this VC (applicable only for VC firms)
	NumberOfExits *int `json:"number_of_exits"`

	// NumberOfFundingRounds Total rounds of funding that this company has raised
	NumberOfFundingRounds *int `json:"number_of_funding_rounds"`

	// NumberOfInvestments
	//         Total investments made by this VC firm (applicable only for VC firms)
	//
	NumberOfInvestments *int `json:"number_of_investments"`

	// NumberOfInvestors Total investors
	NumberOfInvestors *int `json:"number_of_investors"`

	// NumberOfLeadInvestments
	//         Total investments that was led by this VC firm
	//         (applicable only for VC firms)
	//
	NumberOfLeadInvestments *int `json:"number_of_lead_investments"`

	// NumberOfLeadInvestors Total lead investors
	NumberOfLeadInvestors *int `json:"number_of_lead_investors"`

	// OperatingStatus Status of the company's operational status
	OperatingStatus *string `json:"operating_status"`

	// PhoneNumber General contact number of the company
	PhoneNumber *string `json:"phone_number"`

	// StockSymbol Stock symbol of this public company
	StockSymbol *string `json:"stock_symbol"`

	// TotalFundRaised
	//         The total amount of funds raised (by this VC firm) to be deployed as
	//         subsidiary investments (applicable only for VC firms)
	//
	TotalFundRaised *int `json:"total_fund_raised"`

	// TotalFundingAmount Total venture capital raised by this company
	TotalFundingAmount *int `json:"total_funding_amount"`

	// TwitterId ID of the company's official Twitter account
	TwitterId *string `json:"twitter_id"`
}

// CompanyLocation defines model for CompanyLocation.
type CompanyLocation struct {
	City       *string `json:"city"`
	Country    *string `json:"country"`
	IsHq       *bool   `json:"is_hq,omitempty"`
	Line1      *string `json:"line_1"`
	PostalCode *string `json:"postal_code"`
	State      *string `json:"state"`
}

// CompanySearchResult defines model for CompanySearchResult.
type CompanySearchResult struct {
	// NextPage
	//         The URL to the next page of search results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`

	// Results
	//         A list of SearchResult objects.
	//
	Results *[]CSearchResult `json:"results,omitempty"`

	// TotalResultCount Total results found.
	TotalResultCount *int `json:"total_result_count,omitempty"`
}

// CompanyType defines model for CompanyType.
type CompanyType string

// CompanyUpdate defines model for CompanyUpdate.
type CompanyUpdate struct {
	// ArticleLink The URL for which the post links out to
	ArticleLink *string `json:"article_link"`

	// Image The URL to the image to the post (if it exists)
	Image    *string `json:"image"`
	PostedOn *Date   `json:"posted_on,omitempty"`

	// Text The body of the update
	Text *string `json:"text"`

	// TotalLikes The total likes a post has received
	TotalLikes *int `json:"total_likes"`
}

// CompanyUrlEnrichResult defines model for CompanyUrlEnrichResult.
type CompanyUrlEnrichResult struct {
	// LastUpdated ISO 8601 timestamp since the enriched profile was last scraped.
	LastUpdated *string          `json:"last_updated"`
	Profile     *LinkedinCompany `json:"profile,omitempty"`

	// Url The LinkedIn profile URL
	Url *string `json:"url"`
}

// Course defines model for Course.
type Course struct {
	// Name Name of the course
	Name *string `json:"name"`

	// Number The numerical representation of the course
	Number *string `json:"number"`
}

// CreditBalance defines model for CreditBalance.
type CreditBalance struct {
	// CreditBalance Your current credit(s)
	CreditBalance *int `json:"credit_balance,omitempty"`
}

// CustomerCount defines model for CustomerCount.
type CustomerCount struct {
	// CompanyCount A count of of companies that are probable customers.
	CompanyCount *int `json:"company_count"`
}

// CustomerList defines model for CustomerList.
type CustomerList struct {
	// Companies A list of companies that are probable customers.
	Companies *[]CompanyCustomer `json:"companies,omitempty"`

	// NextPage
	//         The API URI that will lead to the next page of results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`
}

// Date defines model for Date.
type Date struct {
	Day   *int `json:"day"`
	Month *int `json:"month"`
	Year  *int `json:"year,omitempty"`
}

// DisposableEmail defines model for DisposableEmail.
type DisposableEmail struct {
	// IsDisposableEmail Returns a boolean value of the disposable nature of the given email address
	IsDisposableEmail *bool `json:"is_disposable_email,omitempty"`

	// IsFreeEmail Returns a boolean value of the free status of the given email address
	IsFreeEmail *bool `json:"is_free_email,omitempty"`
}

// Education defines model for Education.
type Education struct {
	// ActivitiesAndSocieties The activities and societies that the user participated in.
	ActivitiesAndSocieties *string `json:"activities_and_societies"`

	// DegreeName The degree that the user obtained.
	DegreeName *string `json:"degree_name"`

	// Description Description of the education.
	Description *string `json:"description"`
	EndsAt      *Date   `json:"ends_at,omitempty"`

	// FieldOfStudy The field of study that the user majored in.
	FieldOfStudy *string `json:"field_of_study"`

	// Grade The grade that the user obtained.
	Grade *string `json:"grade"`

	// LogoUrl URL of the logo of the organisation.
	LogoUrl *string `json:"logo_url"`

	// School The school that the user attended.
	School *string `json:"school"`

	// SchoolFacebookProfileUrl
	//                 The school's profile URL on Facebook.
	//
	SchoolFacebookProfileUrl *string `json:"school_facebook_profile_url"`

	// SchoolLinkedinProfileUrl
	//                 The school's profile URL on Linkedin.
	//                 If present, could be used with
	//                 [School Profile Endpoint](#school-api-school-profile-endpoint) for more info.
	//
	SchoolLinkedinProfileUrl *string `json:"school_linkedin_profile_url"`
	StartsAt                 *Date   `json:"starts_at,omitempty"`
}

// Employee defines model for Employee.
type Employee struct {
	// LastUpdated
	//             ISO 8601 timestamp since the enriched profile was last scraped.
	//
	LastUpdated *string       `json:"last_updated"`
	Profile     *PublicPerson `json:"profile,omitempty"`

	// ProfileUrl
	//         LinkedIn Profile URL of the employee.
	//
	ProfileUrl *string `json:"profile_url,omitempty"`
}

// EmployeeCount defines model for EmployeeCount.
type EmployeeCount struct {
	// LinkdbEmployeeCount The total number of employees found in LinkDB for this company. This value is limited by pre-crawled LinkedIn profiles stored in [LinkDB](https://nubela.co/proxycurl/linkdb)
	LinkdbEmployeeCount *int `json:"linkdb_employee_count,omitempty"`

	// LinkedinEmployeeCount The scraped value of employee count of this company from it's LinkedIn profile. This value does not respect `employement_status` parameter. It will always return the curent employee count of this company from LinkedIn.
	LinkedinEmployeeCount *int    `json:"linkedin_employee_count"`
	RegressionNotice      *string `json:"regression_notice,omitempty"`
	TotalEmployee         *int    `json:"total_employee,omitempty"`
}

// EmployeeList defines model for EmployeeList.
type EmployeeList struct {
	// Employees
	//         A list of employee profiles (if enriched) and their associated profile URL.
	//
	Employees *[]Employee `json:"employees,omitempty"`

	// NextPage
	//         The API URI that will lead to the next page of results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`
}

// Exit defines model for Exit.
type Exit struct {
	// CrunchbaseProfileUrl Crunchbase Profile URL of the company that has exited
	CrunchbaseProfileUrl *string `json:"crunchbase_profile_url"`

	// LinkedinProfileUrl LinkedIn Profile URL of the company that has exited
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`

	// Name Name of the company
	Name *string `json:"name"`
}

// Experience defines model for Experience.
type Experience struct {
	// Company The company's display name.
	Company *string `json:"company"`

	// CompanyFacebookProfileUrl
	//                 The company's profile URL on Facebook.
	//
	CompanyFacebookProfileUrl *string `json:"company_facebook_profile_url"`

	// CompanyLinkedinProfileUrl
	//                 The company's profile URL on Linkedin.
	//                 If present, could be used with
	//                 [Company Profile Endpoint](#company-api-company-profile-endpoint) for more info.
	//
	CompanyLinkedinProfileUrl *string `json:"company_linkedin_profile_url"`
	Description               *string `json:"description"`
	EndsAt                    *Date   `json:"ends_at,omitempty"`
	Location                  *string `json:"location"`

	// LogoUrl URL of the logo of the organisation.
	LogoUrl  *string `json:"logo_url"`
	StartsAt *Date   `json:"starts_at,omitempty"`
	Title    *string `json:"title"`
}

// ExtractionEmailResult defines model for ExtractionEmailResult.
type ExtractionEmailResult struct {
	// EmailQueueCount Total queue in the email extraction process
	EmailQueueCount *int `json:"email_queue_count,omitempty"`
}

// Follower defines model for Follower.
type Follower struct {
	Email              *string `json:"email"`
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`
	TwitterProfileUrl  *string `json:"twitter_profile_url,omitempty"`
}

// FollowerList defines model for FollowerList.
type FollowerList struct {
	// Followers
	//         A list of individual followers of a company.
	//
	Followers *[]Follower `json:"followers,omitempty"`

	// NextPage
	//         The API URI that will lead to the next page of results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`
}

// FollowerListCount defines model for FollowerListCount.
type FollowerListCount struct {
	// FollowerCount A count of all individuals that are probable customers or followers.
	FollowerCount *int `json:"follower_count,omitempty"`
}

// Funding defines model for Funding.
type Funding struct {
	AnnouncedDate *Date `json:"announced_date,omitempty"`

	// FundingType Type of funding
	FundingType  *string     `json:"funding_type"`
	InvestorList *[]Investor `json:"investor_list"`

	// MoneyRaised Amount of money raised
	MoneyRaised *int `json:"money_raised"`

	// NumberOfInvestor Number of investors in this round
	NumberOfInvestor *int `json:"number_of_investor"`
}

// HonourAward defines model for HonourAward.
type HonourAward struct {
	// Description Description of the honour/award.
	Description *string `json:"description"`
	IssuedOn    *Date   `json:"issued_on,omitempty"`

	// Issuer The organisation body issuing this honour/award.
	Issuer *string `json:"issuer"`

	// Title Title of the honour/award.
	Title *string `json:"title"`
}

// InferredSalary defines model for InferredSalary.
type InferredSalary struct {
	Max *float32 `json:"max"`
	Min *float32 `json:"min"`
}

// Investor defines model for Investor.
type Investor struct {
	// LinkedinProfileUrl LinkedIn Profile URL of investor
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`

	// Name Name of investor
	Name *string `json:"name"`

	// Type Type of investor
	Type *string `json:"type"`
}

// JobCompany defines model for JobCompany.
type JobCompany struct {
	// Logo
	//         The URL to the logo of this company.
	//
	Logo *string `json:"logo"`

	// Name
	//         The name of the company.
	//
	Name *string `json:"name"`

	// Url
	//         The LinkedIn Company Profile URL of the job posting company.
	//
	Url *string `json:"url"`
}

// JobListCount defines model for JobListCount.
type JobListCount struct {
	Count *int `json:"count,omitempty"`
}

// JobListEntry defines model for JobListEntry.
type JobListEntry struct {
	// Company
	//         The name of the company that posted this job.
	//
	Company *string `json:"company"`

	// CompanyUrl
	//         The LinkedIn Company Profile URL that posted this job.
	//
	CompanyUrl *string `json:"company_url"`

	// JobTitle
	//         Job title of the posted job.
	//
	JobTitle *string `json:"job_title"`

	// JobUrl
	//         Job Profile URL. You can fetch details about this job using this URL via the [Job Profile API Endpoint](https://nubela.co/proxycurl/docs#jobs-api-job-profile-endpoint).
	//
	JobUrl *string `json:"job_url"`

	// ListDate
	//         The date that this job was listed.
	//
	ListDate *string `json:"list_date"`

	// Location
	//         The job location.
	//
	Location *string `json:"location"`
}

// JobListPage defines model for JobListPage.
type JobListPage struct {
	Job *[]JobListEntry `json:"job,omitempty"`

	// NextPageApiUrl
	//             The URL to the next page of results. This will be null for the final page.
	//
	NextPageApiUrl *string `json:"next_page_api_url"`
	NextPageNo     *int    `json:"next_page_no"`

	// PreviousPageApiUrl
	//             The URL to the previous page of results. This will be null for the first page.
	//
	PreviousPageApiUrl *string `json:"previous_page_api_url"`
	PreviousPageNo     *int    `json:"previous_page_no"`
}

// JobLocation defines model for JobLocation.
type JobLocation struct {
	// City
	//         The city for the job.
	//
	City *string `json:"city"`

	// Country
	//         Full country name.
	//
	Country *string `json:"country"`

	// Latitude
	//         Latitude coordinates of the business location for the job.
	//
	Latitude *float32 `json:"latitude"`

	// Longitude
	//         Longitude coordinates of the business location for the job.
	//
	Longitude *float32 `json:"longitude"`

	// PostalCode
	//         Postal code of the business location for the job.
	//
	PostalCode *string `json:"postal_code"`

	// Region
	//         Region.
	//
	Region *string `json:"region"`

	// Street
	//         Street address of the business location for the job.
	//
	Street *string `json:"street"`
}

// JobProfile defines model for JobProfile.
type JobProfile struct {
	// ApplyUrl
	//         The URL to apply for this job.
	//
	ApplyUrl *string     `json:"apply_url"`
	Company  *JobCompany `json:"company,omitempty"`

	// EmploymentType
	//         Type of employment.
	//
	EmploymentType *string `json:"employment_type"`

	// Industry
	//         A list of industries that the company which posted this job lies in.
	//
	Industry *[]string `json:"industry,omitempty"`

	// JobDescription
	//         Description of the posted job.
	//
	JobDescription *string `json:"job_description"`

	// JobFunctions
	//         A list of job functions that this role is expected to cover.
	//
	JobFunctions *[]string `json:"job_functions,omitempty"`

	// LinkedinInternalId
	//         The internal ID representation of this job that LinkedIn has for this job.
	//
	LinkedinInternalId *string      `json:"linkedin_internal_id"`
	Location           *JobLocation `json:"location,omitempty"`

	// SeniorityLevel
	//         The seniority level for this role.
	//
	SeniorityLevel *string `json:"seniority_level"`

	// Title
	//         Title of the posted job.
	//
	Title *string `json:"title"`

	// TotalApplicants
	//         Total applicants for this job so far.
	//
	TotalApplicants *int `json:"total_applicants"`
}

// LinkedinCompany defines model for LinkedinCompany.
type LinkedinCompany struct {
	Acquisitions        *Acquisition         `json:"acquisitions,omitempty"`
	AffiliatedCompanies *[]AffiliatedCompany `json:"affiliated_companies,omitempty"`

	// BackgroundCoverImageUrl The URL of the company's background cover image.
	BackgroundCoverImageUrl *string `json:"background_cover_image_url"`

	// Categories The `categories` attribute is fetched from the                 company's Crunchbase profile. Values for this attribute are                 free-form text, and there is no exhaustive list of categories.                Consider the categories attribute as "hints" regarding the                 products or services offered by the company.
	Categories *[]string `json:"categories"`

	// CompanySize Sequenceed range of company head count
	CompanySize *[]LinkedinCompany_CompanySize_Item `json:"company_size,omitempty"`

	// CompanySizeOnLinkedin The size of the company as indicated on LinkedIn.
	CompanySizeOnLinkedin *int         `json:"company_size_on_linkedin"`
	CompanyType           *CompanyType `json:"company_type,omitempty"`
	CustomerList          *[]string    `json:"customer_list"`

	// Description A textual description of the company.
	Description *string         `json:"description"`
	ExitData    *[]Exit         `json:"exit_data"`
	Extra       *CompanyDetails `json:"extra,omitempty"`

	// FollowerCount The number of followers                the company has on LinkedIn.
	FollowerCount *int `json:"follower_count"`

	// FoundedYear The year the company was founded.
	FoundedYear *int `json:"founded_year"`

	// FundingData Company Funding data when `funding_data=include`
	FundingData *[]Funding       `json:"funding_data,omitempty"`
	Hq          *CompanyLocation `json:"hq,omitempty"`

	// Industry The `industry` attribute, found in a LinkedIn Company            profile, describes the industry in which the company operates.            The value of this attribute is an enumerator. [This CSV file            provides an exhaustive list of possible values for this attribute]            (https://drive.google.com/file/d/12yvYLuru7CRv3wKOIkHs5Ldocz31gJSS/view?usp=share_link).
	Industry *string `json:"industry"`

	// LinkedinInternalId
	//         LinkedIn's Internal and immutable ID of this Company profile.
	//
	LinkedinInternalId *string            `json:"linkedin_internal_id,omitempty"`
	Locations          *[]CompanyLocation `json:"locations,omitempty"`

	// Name The name of the company.
	Name *string `json:"name"`

	// ProfilePicUrl The URL of the company's profile picture.
	ProfilePicUrl *string `json:"profile_pic_url"`

	// SearchId
	//         Useable with [Job listing endpoint](#jobs-api-jobs-listing-endpoint)
	//
	SearchId         *string           `json:"search_id,omitempty"`
	SimilarCompanies *[]SimilarCompany `json:"similar_companies,omitempty"`

	// Specialities
	//                 A list of specialities.
	//
	Specialities *[]string `json:"specialities,omitempty"`

	// Tagline A short, catchy phrase that represents                the company's mission or brand.
	Tagline *string `json:"tagline"`

	// UniversalNameId A unique numerical identifier for                the company used in the LinkedIn platform.
	UniversalNameId *string `json:"universal_name_id"`

	// Updates A list of post updates made by the company. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	Updates *[]CompanyUpdate `json:"updates,omitempty"`

	// Website The URL of the company's website.
	Website *string `json:"website"`
}

// LinkedinCompanyCompanySize0 defines model for .
type LinkedinCompanyCompanySize0 = int

// LinkedinCompanyCompanySize1 defines model for .
type LinkedinCompanyCompanySize1 = int

// LinkedinCompany_CompanySize_Item defines model for LinkedinCompany.company_size.Item.
type LinkedinCompany_CompanySize_Item struct {
	union json.RawMessage
}

// LinkedinSchool defines model for LinkedinSchool.
type LinkedinSchool struct {
	AffiliatedCompanies *[]AffiliatedCompany `json:"affiliated_companies,omitempty"`

	// BackgroundCoverImageUrl The URL of the company's background cover image.
	BackgroundCoverImageUrl *string `json:"background_cover_image_url"`

	// CompanySize Sequenceed range of company head count
	CompanySize *[]LinkedinSchool_CompanySize_Item `json:"company_size,omitempty"`

	// CompanySizeOnLinkedin The size of the company as indicated on LinkedIn.
	CompanySizeOnLinkedin *int         `json:"company_size_on_linkedin"`
	CompanyType           *CompanyType `json:"company_type,omitempty"`

	// Description A textual description of the company.
	Description *string `json:"description"`

	// FollowerCount The number of followers                the company has on LinkedIn.
	FollowerCount *int `json:"follower_count"`

	// FoundedYear The year the company was founded.
	FoundedYear *int             `json:"founded_year"`
	Hq          *CompanyLocation `json:"hq,omitempty"`

	// Industry The `industry` attribute, found in a LinkedIn Company            profile, describes the industry in which the company operates.            The value of this attribute is an enumerator. [This CSV file            provides an exhaustive list of possible values for this attribute]            (https://drive.google.com/file/d/12yvYLuru7CRv3wKOIkHs5Ldocz31gJSS/view?usp=share_link).
	Industry *string `json:"industry"`

	// LinkedinInternalId
	//         LinkedIn's Internal and immutable ID of this Company profile.
	//
	LinkedinInternalId *string            `json:"linkedin_internal_id,omitempty"`
	Locations          *[]CompanyLocation `json:"locations,omitempty"`

	// Name The name of the company.
	Name *string `json:"name"`

	// ProfilePicUrl The URL of the company's profile picture.
	ProfilePicUrl *string `json:"profile_pic_url"`

	// SearchId
	//         Useable with [Job listing endpoint](#jobs-api-jobs-listing-endpoint)
	//
	SearchId         *string           `json:"search_id,omitempty"`
	SimilarCompanies *[]SimilarCompany `json:"similar_companies,omitempty"`

	// Specialities
	//                 A list of specialities.
	//
	Specialities *[]string `json:"specialities,omitempty"`

	// Tagline A short, catchy phrase that represents                the company's mission or brand.
	Tagline *string `json:"tagline"`

	// UniversalNameId A unique numerical identifier for                the company used in the LinkedIn platform.
	UniversalNameId *string `json:"universal_name_id"`

	// Updates A list of post updates made by the company. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	Updates *[]CompanyUpdate `json:"updates,omitempty"`

	// Website The URL of the company's website.
	Website *string `json:"website"`
}

// LinkedinSchoolCompanySize0 defines model for .
type LinkedinSchoolCompanySize0 = int

// LinkedinSchoolCompanySize1 defines model for .
type LinkedinSchoolCompanySize1 = int

// LinkedinSchool_CompanySize_Item defines model for LinkedinSchool.company_size.Item.
type LinkedinSchool_CompanySize_Item struct {
	union json.RawMessage
}

// PDLEmailResult defines model for PDLEmailResult.
type PDLEmailResult struct {
	// Emails A list of personal emails
	Emails *[]string `json:"emails,omitempty"`

	// InvalidEmails A list of invalid personal emails
	InvalidEmails *[]string `json:"invalid_emails,omitempty"`
}

// Patent defines model for Patent.
type Patent struct {
	// ApplicationNumber Numerical representation that identifies the patent.
	ApplicationNumber *string `json:"application_number"`

	// Description Description of the patent.
	Description *string `json:"description"`
	IssuedOn    *Date   `json:"issued_on,omitempty"`

	// Issuer The organisation body that issued the patent.
	Issuer *string `json:"issuer"`

	// PatentNumber Application number of the patent.
	PatentNumber *string `json:"patent_number"`

	// Title Title of the patent.
	Title *string `json:"title"`
	Url   *string `json:"url"`
}

// PeopleAlsoViewed defines model for PeopleAlsoViewed.
type PeopleAlsoViewed struct {
	// Link
	//             URL of the profile.
	//             Useable with [Person profile endpoint](#people-api-person-profile-endpoint)
	//
	Link     *string `json:"link"`
	Location *string `json:"location"`
	Name     *string `json:"name"`
	Summary  *string `json:"summary"`
}

// PersonEndpointResponse defines model for PersonEndpointResponse.
type PersonEndpointResponse struct {
	// AccomplishmentCourses List of noteworthy courses partook by this user.
	AccomplishmentCourses *[]Course `json:"accomplishment_courses,omitempty"`

	// AccomplishmentHonorsAwards
	//                 List of noteworthy honours and awards that this user has won.
	//
	AccomplishmentHonorsAwards *[]HonourAward `json:"accomplishment_honors_awards,omitempty"`

	// AccomplishmentOrganisations
	//                 List of noteworthy organizations that this user is part of.
	//
	AccomplishmentOrganisations *[]AccomplishmentOrg `json:"accomplishment_organisations,omitempty"`

	// AccomplishmentPatents List of noteworthy patents won by this user.
	AccomplishmentPatents *[]Patent `json:"accomplishment_patents,omitempty"`

	// AccomplishmentProjects
	//                 List of noteworthy projects undertaken by this user.
	//
	AccomplishmentProjects *[]Project `json:"accomplishment_projects,omitempty"`

	// AccomplishmentPublications
	//                 List of noteworthy publications that this user has partook in.
	//
	AccomplishmentPublications *[]Publication `json:"accomplishment_publications,omitempty"`

	// AccomplishmentTestScores
	//                 List of noteworthy test scores accomplished by this user.
	//
	AccomplishmentTestScores *[]TestScore `json:"accomplishment_test_scores,omitempty"`

	// Activities A list of LinkedIn status activities. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	Activities *[]Activity `json:"activities,omitempty"`

	// Articles
	//                 A list of content-based articles posted by this user. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	//
	Articles *[]Article `json:"articles,omitempty"`

	// BackgroundCoverImageUrl
	//                 A temporary link to the user's background cover picture
	//                 that is valid for 30 minutes.
	//                 The temporal nature of the link is by design to prevent
	//                 having Proxycurl be the mirror for the images.
	//                 The developer is expected to handle these images
	//                 by downloading the image and re-hosting the image.
	//                 See [this post](https://nubela.co/blog/why-is-the-api-returning-s3-links-for-profile-pictures-scraped-from-linkedin-profiles/) for context.
	//
	BackgroundCoverImageUrl *string `json:"background_cover_image_url"`
	BirthDate               *Date   `json:"birth_date,omitempty"`

	// Certifications
	//                 List of noteworthy certifications accomplished by this user.
	//
	Certifications *[]Certification `json:"certifications,omitempty"`

	// City The city that the user is living at.
	City *string `json:"city"`

	// Connections Total *count* of LinkedIn connections.
	Connections *int `json:"connections"`

	// Country
	//                 The user's country of residence depicted by
	//                 a 2-letter country code (ISO 3166-1 alpha-2).
	//
	Country *string `json:"country"`

	// CountryFullName The user's country of residence, in English words.
	CountryFullName *string `json:"country_full_name"`

	// Education The user's list of education background.
	Education *[]Education `json:"education,omitempty"`

	// Experiences The user's list of historic work experiences.
	Experiences *[]Experience `json:"experiences,omitempty"`
	Extra       *PersonExtra  `json:"extra,omitempty"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// FollowerCount Follower count for this profile
	FollowerCount *int `json:"follower_count"`

	// FullName
	//                 Full name of the user (`first_name` + `last_name`)
	//
	FullName *string `json:"full_name"`

	// Gender Gender of the user.
	Gender *string `json:"gender"`

	// Groups
	//                 A list of LinkedIn groups that this user is a part of.",
	//
	Groups *[]PersonGroup `json:"groups,omitempty"`

	// Headline
	//                 The tagline written by the user for his profile.
	//
	Headline *string `json:"headline"`

	// Industry Industry that the user works in.
	Industry       *string         `json:"industry"`
	InferredSalary *InferredSalary `json:"inferred_salary,omitempty"`

	// Interests A list of interests that the user has.
	Interests *[]string `json:"interests,omitempty"`

	// Languages
	//                 A list of languages that the user claims to be familiar with,
	//                 and has added to his/her profile.
	//                 Do note that we do not have the proficiency level as
	//                 that data point is not available on a  LinkedIn profile.
	//
	Languages *[]string `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Occupation
	//                 The title and company name of the user's current employment.
	//
	Occupation *string `json:"occupation"`

	// PeopleAlsoViewed
	//                 A list of other LinkedIn profiles closely related to this user.
	//
	PeopleAlsoViewed *[]PeopleAlsoViewed `json:"people_also_viewed,omitempty"`

	// PersonalEmails A list of personal emails associated with this user.
	PersonalEmails *[]string `json:"personal_emails,omitempty"`

	// PersonalNumbers A list of personal mobile phone numbers associated with this user.
	PersonalNumbers *[]string `json:"personal_numbers,omitempty"`

	// ProfilePicUrl
	//                 A temporary link to the user's profile picture that is valid for 30 minutes.
	//                 The temporal nature of the link is by design to prevent having Proxycurl be the mirror for the images.
	//                 The developer is expected to handle these images by downloading the image and re-hosting the image.
	//                 See [this post](https://nubela.co/blog/why-is-the-api-returning-s3-links-for-profile-pictures-scraped-from-linkedin-profiles/) for context.
	//                 Some profile pictures might be of the standard LinkedIn's profile picture placeholder. It is so because. See [this post](https://nubela.co/blog/why-do-most-linkedin-profiles-fetched-via-the-person-profile-endpoint-return-a-placeholder-profile-picture/) for context.
	//
	ProfilePicUrl *string `json:"profile_pic_url"`

	// PublicIdentifier
	//                 The vanity identifier of the  LinkedIn profile.
	//                 The vanity identifier comes after the `/in/` part of the LinkedIn Profile URL
	//                 in the following format: `https://www.linkedin.com/in/<_identifier>`
	//
	PublicIdentifier *string `json:"public_identifier"`

	// Recommendations
	//                 List of recommendations made by other users about this profile.
	//
	Recommendations *[]string `json:"recommendations,omitempty"`

	// SimilarlyNamedProfiles
	//                 A list of other LinkedIn profiles with similar names.
	//
	SimilarlyNamedProfiles *[]SimilarProfile `json:"similarly_named_profiles,omitempty"`

	// Skills A list of keyword-based skills that this user boasts of on his LinkedIn profile.
	Skills *[]string `json:"skills,omitempty"`

	// State The state that the user is living at.
	State *string `json:"state"`

	// Summary
	//                 A blurb (longer than the tagline) written by the user for his profile.
	//
	Summary *string `json:"summary"`

	// VolunteerWork List of historic volunteer work experiences.
	VolunteerWork *[]VolunteeringExperience `json:"volunteer_work,omitempty"`
}

// PersonExtra defines model for PersonExtra.
type PersonExtra struct {
	// FacebookProfileId This profile's Facebook account.
	FacebookProfileId *string `json:"facebook_profile_id"`

	// GithubProfileId This profile's Github account.
	GithubProfileId *string `json:"github_profile_id"`

	// TwitterProfileId This profile's twitter account.
	TwitterProfileId *string `json:"twitter_profile_id"`

	// Website This account's website listed on his profile.
	Website *string `json:"website"`
}

// PersonGroup defines model for PersonGroup.
type PersonGroup struct {
	// Name Name of LinkedIn group for which this user is in
	Name *string `json:"name"`

	// ProfilePicUrl The URL to the profile picture of this LinkedIn Group
	ProfilePicUrl *string `json:"profile_pic_url"`

	// Url URL to the LinkedIn Group
	Url *string `json:"url"`
}

// PersonLookupUrlEnrichResult defines model for PersonLookupUrlEnrichResult.
type PersonLookupUrlEnrichResult struct {
	// CompanySimilarityScore A measure of how similar the input company name/domain is to the name/domain of past or present companies in the returned profile. The score ranges from `0` to `1` , with `0` signifying no similarity and `1` denoting high similarity. If a relevant profile is unavailable in our dataset for comparison, a `null` score may be returned.
	CompanySimilarityScore *float32 `json:"company_similarity_score"`

	// LastUpdated ISO 8601 timestamp since the enriched profile was last scraped.
	LastUpdated *string `json:"last_updated"`

	// LocationSimilarityScore A measure of how similar the input location is to the returned profile's current location. The range is from `0` to `1` , with `0` representing no similarity and `1` signifying high similarity. If there isn't a relevant profile in our dataset for comparison, the score might be `null`.
	LocationSimilarityScore *float32 `json:"location_similarity_score"`

	// NameSimilarityScore A measure of how similar the input name is to the name in the returned profile. Values can range from `0` to `1` , with `0` indicating no similarity and `1` implying high similarity. In cases where a current profile for comparison is not available in our dataset, the result may be `null`.
	NameSimilarityScore *float32                `json:"name_similarity_score"`
	Profile             *PersonEndpointResponse `json:"profile,omitempty"`

	// TitleSimilarityScore A measure of how similar the input title is to the returned profile's past or present titles. Scores vary from `0` to `1` , where `0` means no similarity and `1` indicates high similarity. If a relevant profile for comparison isn't available in our dataset, a `null` result may occur.
	TitleSimilarityScore *float32 `json:"title_similarity_score"`

	// Url The LinkedIn profile URL
	Url *string `json:"url"`
}

// PersonSearchResult defines model for PersonSearchResult.
type PersonSearchResult struct {
	// NextPage
	//         The URL to the next page of search results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`

	// Results
	//         A list of SearchResult objects
	//
	Results *[]SearchResult `json:"results,omitempty"`

	// TotalResultCount Total results found.
	TotalResultCount *int `json:"total_result_count,omitempty"`
}

// PersonalContactNumbers defines model for PersonalContactNumbers.
type PersonalContactNumbers struct {
	// Numbers A list of contact numbers
	Numbers *[]string `json:"numbers,omitempty"`
}

// ProfilePicture defines model for ProfilePicture.
type ProfilePicture struct {
	// TmpProfilePicUrl
	//             Temporary URL to the profile picture (valid for just 30 minutes).
	//             See this [blog post](https://nubela.co/blog/why-is-the-api-returning-s3-links-for-profile-pictures-scraped-from-linkedin-profiles/) for more information.
	TmpProfilePicUrl *string `json:"tmp_profile_pic_url,omitempty"`
}

// Project defines model for Project.
type Project struct {
	// Description Description of the project.
	Description *string `json:"description"`
	EndsAt      *Date   `json:"ends_at,omitempty"`
	StartsAt    *Date   `json:"starts_at,omitempty"`

	// Title
	//                 Name of the project that has been or is currently being worked on.
	//
	Title *string `json:"title"`

	// Url A web location related to the project.
	Url *string `json:"url"`
}

// PublicPerson defines model for PublicPerson.
type PublicPerson struct {
	// AccomplishmentCourses List of noteworthy courses partook by this user.
	AccomplishmentCourses *[]Course `json:"accomplishment_courses,omitempty"`

	// AccomplishmentHonorsAwards
	//                 List of noteworthy honours and awards that this user has won.
	//
	AccomplishmentHonorsAwards *[]HonourAward `json:"accomplishment_honors_awards,omitempty"`

	// AccomplishmentOrganisations
	//                 List of noteworthy organizations that this user is part of.
	//
	AccomplishmentOrganisations *[]AccomplishmentOrg `json:"accomplishment_organisations,omitempty"`

	// AccomplishmentPatents List of noteworthy patents won by this user.
	AccomplishmentPatents *[]Patent `json:"accomplishment_patents,omitempty"`

	// AccomplishmentProjects
	//                 List of noteworthy projects undertaken by this user.
	//
	AccomplishmentProjects *[]Project `json:"accomplishment_projects,omitempty"`

	// AccomplishmentPublications
	//                 List of noteworthy publications that this user has partook in.
	//
	AccomplishmentPublications *[]Publication `json:"accomplishment_publications,omitempty"`

	// AccomplishmentTestScores
	//                 List of noteworthy test scores accomplished by this user.
	//
	AccomplishmentTestScores *[]TestScore `json:"accomplishment_test_scores,omitempty"`

	// Activities A list of LinkedIn status activities. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	Activities *[]Activity `json:"activities,omitempty"`

	// Articles
	//                 A list of content-based articles posted by this user. This field is not guaranteed to be returned. Do not rely on this attribute in production.
	//
	Articles *[]Article `json:"articles,omitempty"`

	// BackgroundCoverImageUrl
	//                 A temporary link to the user's background cover picture
	//                 that is valid for 30 minutes.
	//                 The temporal nature of the link is by design to prevent
	//                 having Proxycurl be the mirror for the images.
	//                 The developer is expected to handle these images
	//                 by downloading the image and re-hosting the image.
	//                 See [this post](https://nubela.co/blog/why-is-the-api-returning-s3-links-for-profile-pictures-scraped-from-linkedin-profiles/) for context.
	//
	BackgroundCoverImageUrl *string `json:"background_cover_image_url"`

	// Certifications
	//                 List of noteworthy certifications accomplished by this user.
	//
	Certifications *[]Certification `json:"certifications,omitempty"`

	// City The city that the user is living at.
	City *string `json:"city"`

	// Connections Total *count* of LinkedIn connections.
	Connections *int `json:"connections"`

	// Country
	//                 The user's country of residence depicted by
	//                 a 2-letter country code (ISO 3166-1 alpha-2).
	//
	Country *string `json:"country"`

	// CountryFullName The user's country of residence, in English words.
	CountryFullName *string `json:"country_full_name"`

	// Education The user's list of education background.
	Education *[]Education `json:"education,omitempty"`

	// Experiences The user's list of historic work experiences.
	Experiences *[]Experience `json:"experiences,omitempty"`

	// FirstName First name of the user.
	FirstName *string `json:"first_name"`

	// FollowerCount Follower count for this profile
	FollowerCount *int `json:"follower_count"`

	// FullName
	//                 Full name of the user (`first_name` + `last_name`)
	//
	FullName *string `json:"full_name"`

	// Groups
	//                 A list of LinkedIn groups that this user is a part of.",
	//
	Groups *[]PersonGroup `json:"groups,omitempty"`

	// Headline
	//                 The tagline written by the user for his profile.
	//
	Headline *string `json:"headline"`

	// Languages
	//                 A list of languages that the user claims to be familiar with,
	//                 and has added to his/her profile.
	//                 Do note that we do not have the proficiency level as
	//                 that data point is not available on a  LinkedIn profile.
	//
	Languages *[]string `json:"languages,omitempty"`

	// LastName Last name of the user.
	LastName *string `json:"last_name"`

	// Occupation
	//                 The title and company name of the user's current employment.
	//
	Occupation *string `json:"occupation"`

	// PeopleAlsoViewed
	//                 A list of other LinkedIn profiles closely related to this user.
	//
	PeopleAlsoViewed *[]PeopleAlsoViewed `json:"people_also_viewed,omitempty"`

	// ProfilePicUrl
	//                 A temporary link to the user's profile picture that is valid for 30 minutes.
	//                 The temporal nature of the link is by design to prevent having Proxycurl be the mirror for the images.
	//                 The developer is expected to handle these images by downloading the image and re-hosting the image.
	//                 See [this post](https://nubela.co/blog/why-is-the-api-returning-s3-links-for-profile-pictures-scraped-from-linkedin-profiles/) for context.
	//                 Some profile pictures might be of the standard LinkedIn's profile picture placeholder. It is so because. See [this post](https://nubela.co/blog/why-do-most-linkedin-profiles-fetched-via-the-person-profile-endpoint-return-a-placeholder-profile-picture/) for context.
	//
	ProfilePicUrl *string `json:"profile_pic_url"`

	// PublicIdentifier
	//                 The vanity identifier of the  LinkedIn profile.
	//                 The vanity identifier comes after the `/in/` part of the LinkedIn Profile URL
	//                 in the following format: `https://www.linkedin.com/in/<_identifier>`
	//
	PublicIdentifier *string `json:"public_identifier"`

	// Recommendations
	//                 List of recommendations made by other users about this profile.
	//
	Recommendations *[]string `json:"recommendations,omitempty"`

	// SimilarlyNamedProfiles
	//                 A list of other LinkedIn profiles with similar names.
	//
	SimilarlyNamedProfiles *[]SimilarProfile `json:"similarly_named_profiles,omitempty"`

	// Skills A list of keyword-based skills that this user boasts of on his LinkedIn profile.
	Skills *[]string `json:"skills,omitempty"`

	// State The state that the user is living at.
	State *string `json:"state"`

	// Summary
	//                 A blurb (longer than the tagline) written by the user for his profile.
	//
	Summary *string `json:"summary"`

	// VolunteerWork List of historic volunteer work experiences.
	VolunteerWork *[]VolunteeringExperience `json:"volunteer_work,omitempty"`
}

// Publication defines model for Publication.
type Publication struct {
	// Description Description of the Publication.
	Description *string `json:"description"`

	// Name Name of the Publication.
	Name        *string `json:"name"`
	PublishedOn *Date   `json:"published_on,omitempty"`

	// Publisher The publishing organisation body.
	Publisher *string `json:"publisher"`

	// Url URL of the Publication.
	Url *string `json:"url"`
}

// ReverseContactNumberResult defines model for ReverseContactNumberResult.
type ReverseContactNumberResult struct {
	// FacebookProfileUrl Returns the Facebook Profile URL that belongs to this phone number.
	FacebookProfileUrl *string `json:"facebook_profile_url"`

	// LinkedinProfileUrl Returns the closest match of the LinkedIn profile that belongs to this phone number.
	LinkedinProfileUrl *string `json:"linkedin_profile_url"`

	// TwitterProfileUrl Returns the Twitter Profile URL that belongs to this phone number.
	TwitterProfileUrl *string `json:"twitter_profile_url"`
}

// ReverseEmailUrlEnrichResult defines model for ReverseEmailUrlEnrichResult.
type ReverseEmailUrlEnrichResult struct {
	BackwardsCompatibilityNotes *string `json:"backwards_compatibility_notes"`

	// FacebookProfileUrl Returns the Facebook Profile URL that belongs to this email address.
	FacebookProfileUrl *string `json:"facebook_profile_url"`

	// LastUpdated ISO 8601 timestamp since the enriched profile was last scraped.
	LastUpdated *string `json:"last_updated"`

	// LinkedinProfileUrl Returns the closest match of the LinkedIn profile that belongs to this email address.
	LinkedinProfileUrl *string                 `json:"linkedin_profile_url"`
	Profile            *PersonEndpointResponse `json:"profile,omitempty"`

	// SimilarityScore This metric quantifies the degree of resemblance between the queried profile and the retrieved one. Scores range from `0` (no similarity) to `1` (high similarity). In the event that our dataset lacks a pertinent profile for comparison, the assigned score might be `null`.
	SimilarityScore *float32 `json:"similarity_score"`

	// TwitterProfileUrl Returns the Twitter Profile URL that belongs to this email address.
	TwitterProfileUrl *string `json:"twitter_profile_url"`
	Url               *string `json:"url"`
}

// RoleSearchEnrichedResult defines model for RoleSearchEnrichedResult.
type RoleSearchEnrichedResult struct {
	// LastUpdated ISO 8601 timestamp since the enriched profile was last scraped.
	LastUpdated *string `json:"last_updated"`

	// LinkedinProfileUrl LinkedIn Profile URL of the person that most closely matches the role
	LinkedinProfileUrl *string                 `json:"linkedin_profile_url"`
	Profile            *PersonEndpointResponse `json:"profile,omitempty"`
}

// SearchResult defines model for SearchResult.
type SearchResult struct {
	// LastUpdated
	//         ISO 8601 timestamp since the enriched profile was last scraped.
	//
	LastUpdated *string `json:"last_updated"`

	// LinkedinProfileUrl
	//         The LinkedIn Profile URL of the person
	//
	LinkedinProfileUrl *string       `json:"linkedin_profile_url,omitempty"`
	Profile            *PublicPerson `json:"profile,omitempty"`
}

// SimilarCompany defines model for SimilarCompany.
type SimilarCompany struct {
	Industry *string `json:"industry"`
	Link     *string `json:"link"`
	Location *string `json:"location"`
	Name     *string `json:"name"`
}

// SimilarProfile defines model for SimilarProfile.
type SimilarProfile struct {
	Link     *string `json:"link"`
	Location *string `json:"location"`
	Name     *string `json:"name"`
	Summary  *string `json:"summary"`
}

// Student defines model for Student.
type Student struct {
	// LastUpdated
	//             ISO 8601 timestamp since the enriched profile was last scraped.
	//
	LastUpdated *string       `json:"last_updated"`
	Profile     *PublicPerson `json:"profile,omitempty"`
	ProfileUrl  *string       `json:"profile_url,omitempty"`
}

// StudentList defines model for StudentList.
type StudentList struct {
	// NextPage
	//         The API URI that will lead to the next page of results. This will be null for the final page.
	//
	NextPage *string `json:"next_page"`

	// Students
	//         A list of student profiles (if enriched) and their associated profile URL.
	//
	Students *[]Student `json:"students,omitempty"`
}

// TestScore defines model for TestScore.
type TestScore struct {
	DateOn *Date `json:"date_on,omitempty"`

	// Description Description of the test score.
	Description *string `json:"description"`

	// Name
	//                 Title of the course for which test score was derived from.
	//
	Name *string `json:"name"`

	// Score Test score
	Score *string `json:"score"`
}

// VolunteeringExperience defines model for VolunteeringExperience.
type VolunteeringExperience struct {
	Cause *string `json:"cause"`

	// Company The company's display name.
	Company *string `json:"company"`

	// CompanyLinkedinProfileUrl
	//                 The company's profile URL.
	//                 If present, could be used with
	//                 [Company Profile Endpoint](#company-api-company-profile-endpoint) for more info.
	//
	CompanyLinkedinProfileUrl *string `json:"company_linkedin_profile_url"`
	Description               *string `json:"description"`
	EndsAt                    *Date   `json:"ends_at,omitempty"`

	// LogoUrl URL of the logo of the organisation.
	LogoUrl  *string `json:"logo_url"`
	StartsAt *Date   `json:"starts_at,omitempty"`

	// Title Name of volunteer activity.
	Title *string `json:"title"`
}

// PersonalContactNumberLookupEndpointParams defines parameters for PersonalContactNumberLookupEndpoint.
type PersonalContactNumberLookupEndpointParams struct {
	// PageSize
	//     This controls the maximum number of numbers returned per API call.
	//     It's useful for limiting credit consumption as the number of numbers
	//     per identity can vary. The default value is 0, meaning there's no limit
	//     to the number of returned results.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// TwitterProfileUrl
	//     The Twitter/X Profile URL from which you wish to extract personal
	//     contact numbers
	//
	//
	//     Yes (Include only one of: `linkedin_profile_url`,
	//     `twitter_profile_url`, or `facebook_profile_url`)
	//
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`

	// FacebookProfileUrl
	//     The Facebook Profile URL from which you wish to extract personal
	//     contact numbers
	//
	//
	//     Yes (Include only one of: `linkedin_profile_url`,
	//     `twitter_profile_url`, or `facebook_profile_url`)
	//
	FacebookProfileUrl *string `form:"facebook_profile_url,omitempty" json:"facebook_profile_url,omitempty"`

	// LinkedinProfileUrl
	//     The LinkedIn Profile URL from which you wish to extract personal
	//     contact numbers
	//
	//
	//     Yes (Include only one of: `linkedin_profile_url`,
	//     `twitter_profile_url`, or `facebook_profile_url`)
	//
	LinkedinProfileUrl *string `form:"linkedin_profile_url,omitempty" json:"linkedin_profile_url,omitempty"`
}

// PersonalEmailLookupEndpointParams defines parameters for PersonalEmailLookupEndpoint.
type PersonalEmailLookupEndpointParams struct {
	// EmailValidation
	//     How to validate each email.
	//
	//     Takes the following values:
	//      * `none` (default) - Do not perform email validation.
	//      * `fast` - Perform fast email validation (does not cost extra credit).
	//      * `precise` - Perform deliverability validation (costs 1 extra credit per email found).
	//
	//     For backward-compatibility these are also accepted:
	//      * `include` - Equivalent to `precise`
	//      * `exclude` - Equivalent to `none`
	//
	EmailValidation *string `form:"email_validation,omitempty" json:"email_validation,omitempty"`

	// PageSize This controls the maximum number of emails returned per API call. It's useful for limiting credit consumption as the number of emails per identity can vary. The default value is `0`, meaning there's no limit to the number of returned results.
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// TwitterProfileUrl The Twitter/X Profile URL from which you wish to extract personal email addresses.
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`

	// FacebookProfileUrl The Facebook Profile URL from which you wish to extract personal email addresses.
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	FacebookProfileUrl *string `form:"facebook_profile_url,omitempty" json:"facebook_profile_url,omitempty"`

	// LinkedinProfileUrl The LinkedIn Profile URL from which you wish to extract personal email addresses.
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	LinkedinProfileUrl *string `form:"linkedin_profile_url,omitempty" json:"linkedin_profile_url,omitempty"`
}

// CustomerListingEndpointEXPERIMENTALParams defines parameters for CustomerListingEndpointEXPERIMENTAL.
type CustomerListingEndpointEXPERIMENTALParams struct {
	// LinkedinCompanyProfileUrl
	//                 The LinkedIn Profile URL of the company from which you want to get a list of customers of.
	//
	//                 URL should be in the format of `https://www.linkedin.com/company/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	LinkedinCompanyProfileUrl *string `form:"linkedin_company_profile_url,omitempty" json:"linkedin_company_profile_url,omitempty"`

	// TwitterProfileUrl
	//                 The Twitter/X Profile URL belonging to the company that you want to get a list of customers of.
	//
	//                 URL should be in the format of `https://x.com/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`

	// PageSize
	//                 Limit the maximum results of customer companies returned per API call.
	//
	//                 The default value of this parameter is 10.
	//
	//                 Accepted values for this parameter is an integer ranging from 0 to 1000.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// CustomerListingCountEndpointEXPERIMENTALParams defines parameters for CustomerListingCountEndpointEXPERIMENTAL.
type CustomerListingCountEndpointEXPERIMENTALParams struct {
	// LinkedinCompanyProfileUrl
	//                 The LinkedIn Profile URL of the company from which you want to get a list of customers of.
	//
	//                 URL should be in the format of `https://www.linkedin.com/company/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	LinkedinCompanyProfileUrl *string `form:"linkedin_company_profile_url,omitempty" json:"linkedin_company_profile_url,omitempty"`

	// TwitterProfileUrl
	//                 The Twitter/X Profile URL belonging to the company that you want to get a list of customers of.
	//
	//                 URL should be in the format of https://x.com/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`
}

// DisposableEmailAddressCheckEndpointParams defines parameters for DisposableEmailAddressCheckEndpoint.
type DisposableEmailAddressCheckEndpointParams struct {
	// Email Email address to check
	Email string `form:"email" json:"email"`
}

// RoleLookupEndpointParams defines parameters for RoleLookupEndpoint.
type RoleLookupEndpointParams struct {
	// EnrichProfile
	//     Enrich the result with a cached profile of the lookup result.
	//
	//     The valid values are:
	//
	//     * `skip` (default): do not enrich the results with cached profile data
	//     * `enrich`: enriches the result with cached profile data
	//
	//     Calling this API endpoint with this parameter would add 1 credit.
	//
	//     If you require [fresh profile data](https://nubela.co/blog/how-fresh-are-profiles-returned-by-proxycurl-api/),
	//     please chain this API call with the [Person Profile Endpoint](#people-api-person-profile-endpoint) with the `use_cache=if-recent` parameter.
	//
	EnrichProfile *string `form:"enrich_profile,omitempty" json:"enrich_profile,omitempty"`

	// Role Role of the profile that you are lookin up
	Role string `form:"role" json:"role"`

	// CompanyName Name of the company that you are searching for
	CompanyName string `form:"company_name" json:"company_name"`
}

// FollowerListingEndpointEXPERIMENTALParams defines parameters for FollowerListingEndpointEXPERIMENTAL.
type FollowerListingEndpointEXPERIMENTALParams struct {
	// LinkedinCompanyProfileUrl
	//                 The LinkedIn Profile URL of the company from which you want to get a list of followers of.
	//
	//                 URL should be in the format of `https://www.linkedin.com/company/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	LinkedinCompanyProfileUrl *string `form:"linkedin_company_profile_url,omitempty" json:"linkedin_company_profile_url,omitempty"`

	// TwitterProfileUrl
	//                 The Twitter/X Profile URL belonging to the company that you want to get a list of followers of.
	//
	//                 URL should be in the format of `https://x.com/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`

	// PageSize
	//                 Limit the maximum results of followers returned per API call.
	//
	//                 The default value of this parameter is 10.
	//
	//                 Accepted values for this parameter is an integer ranging from 0 to 1000.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`
}

// FollowerListingCountEndpointEXPERIMENTALParams defines parameters for FollowerListingCountEndpointEXPERIMENTAL.
type FollowerListingCountEndpointEXPERIMENTALParams struct {
	// LinkedinCompanyProfileUrl
	//                 The LinkedIn Profile URL of the company from which you want to get a list of followers of.
	//
	//                 URL should be in the format of `https://www.linkedin.com/company/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	LinkedinCompanyProfileUrl *string `form:"linkedin_company_profile_url,omitempty" json:"linkedin_company_profile_url,omitempty"`

	// TwitterProfileUrl
	//                 The Twitter/X Profile URL belonging to the company that you want to get a list of followers of.
	//
	//                 URL should be in the format of `https://x.com/<public-identifier>`
	//
	//
	//                 Yes (Include only one of: `linkedin_company_profile_url` or `twitter_profile_url`)
	//
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`
}

// CompanyProfileEndpointParams defines parameters for CompanyProfileEndpoint.
type CompanyProfileEndpointParams struct {
	// Url
	//                     URL of the LinkedIn Company Profile to crawl.
	//
	//                     URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`
	//
	Url string `form:"url" json:"url"`

	// Categories
	//                     Appends categories data of this company.
	//
	//                     Default value is `"exclude"`.
	//                     The other acceptable value is `"include"`, which will include these categories (if available) for `1` extra credit.
	//
	Categories *string `form:"categories,omitempty" json:"categories,omitempty"`

	// FundingData
	//                     Returns a list of funding rounds that this company has received.
	//
	//                     Default value is `"exclude"`.
	//                     The other acceptable value is `"include"`, which will include these categories (if available) for `1` extra credit.
	//
	FundingData *string `form:"funding_data,omitempty" json:"funding_data,omitempty"`

	// ExitData
	//                     Returns a list of investment portfolio exits.
	//
	//                     Default value is `"exclude"`.
	//                     The other acceptable value is `"include"`, which will include these categories (if available) for `1` extra credit.
	//
	ExitData *string `form:"exit_data,omitempty" json:"exit_data,omitempty"`

	// Acquisitions
	//                     Provides further enriched data on acquisitions made by this company from external sources.
	//
	//                     Default value is `"exclude"`.
	//                     The other acceptable value is `"include"`, which will include these acquisition data (if available) for `1` extra credit.
	//
	Acquisitions *string `form:"acquisitions,omitempty" json:"acquisitions,omitempty"`

	// Extra
	//                     Enriches the Company Profile with extra details from external sources.
	//                     Details include Crunchbase ranking, contact email, phone number, Facebook account, Twitter account, funding rounds and amount, IPO status, investor information, etc.
	//
	//                     Default value is `"exclude"`.
	//                     The other acceptable value is `"include"`, which will include these extra details (if available) for `1` extra credit.
	//
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// UseCache
	//                     `if-present` The default behavior.
	//                     Fetches profile from cache regardless of age of profile.
	//                     If profile is not available in cache, API will attempt to source profile externally.
	//
	//                     `if-recent` API will make a best effort to return a fresh profile no older than 29 days."
	//                     Costs an extra `1` credit on top of the cost of the base endpoint.
	//
	UseCache *string `form:"use_cache,omitempty" json:"use_cache,omitempty"`

	// FallbackToCache
	//                     Tweaks the fallback behavior if an error arises from fetching a fresh profile.
	//
	//                     This parameter accepts the following values:
	//                     * `on-error` (default value) - Fallback to reading the profile from cache if an error arises.
	//                     * `never` - Do not ever read profile from cache.
	//
	FallbackToCache *string `form:"fallback_to_cache,omitempty" json:"fallback_to_cache,omitempty"`
}

// EmployeeSearchEndpointParams defines parameters for EmployeeSearchEndpoint.
type EmployeeSearchEndpointParams struct {
	// PageSize
	//     Tune the maximum results returned per API call.
	//     The default value of this parameter is `200000`.
	//     Accepted values for this parameter is an integer ranging from `1` to `200000`.
	//     When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `10` and the default value is `100`.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// LinkedinCompanyProfileUrl
	//     LinkedIn Profile URL of the target company.
	//
	LinkedinCompanyProfileUrl string `form:"linkedin_company_profile_url" json:"linkedin_company_profile_url"`

	// KeywordRegex
	//     Job title keyword to search for in regular expression format.
	//
	//     The accepted value for this parameter is a **case-insensitive** regular expression.
	//
	KeywordRegex string `form:"keyword_regex" json:"keyword_regex"`

	// Country
	//     Limit the result set to the country locality of the profile. For example, set the parameter of `country=us` if you only want profiles from the US.
	//
	//     This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	//     Costs an extra `3` credit per result returned.
	//
	Country *string `form:"country,omitempty" json:"country,omitempty"`

	// EnrichProfiles
	//     Get the full profile of employees instead of only their profile urls.
	//
	//     Each request respond with a streaming response of profiles.
	//
	//     The valid values are:
	//
	//     * `skip` (default): lists employee's profile url
	//     * `enrich`: lists full profile of employees
	//
	//     Calling this API endpoint with this parameter would add `1` credit per employee returned.
	//
	EnrichProfiles *string `form:"enrich_profiles,omitempty" json:"enrich_profiles,omitempty"`

	// ResolveNumericId
	//     Enable support for Company Profile URLs with numerical IDs that you most frequently fetch from Sales Navigator.
	//     We achieve this by resolving numerical IDs into vanity IDs with cached company profiles from [LinkDB](https://nubela.co/proxycurl/linkdb).
	//     For example, we will turn `https://www.linkedin.com/company/1234567890` to `https://www.linkedin.com/company/acme-corp` -- for which the API endpoint only supports the latter.
	//
	//     This parameter accepts the following values:
	//     - `false` (default value) - Will not resolve numerical IDs.
	//     - `true` - Enable support for Company Profile URLs with numerical IDs.
	//     Costs an extra `2` credit on top of the base cost of the endpoint.
	//
	ResolveNumericId *string `form:"resolve_numeric_id,omitempty" json:"resolve_numeric_id,omitempty"`
}

// EmployeeListingEndpointParams defines parameters for EmployeeListingEndpoint.
type EmployeeListingEndpointParams struct {
	// Country
	//     Limit the result set to the country locality of the profile. For example, set the parameter of `country=us` if you only want profiles from the US. Or you can set the parameter to `country=us,sg` if you want employees from both the US and Singapore.
	//
	//     This parameter accepts a comma-separated case-insensitive values of [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	//     Costs an extra `3` credit per result returned.
	//
	Country *string `form:"country,omitempty" json:"country,omitempty"`

	// EnrichProfiles
	//     Get the full profile of employees instead of only their profile urls.
	//
	//     Each request respond with a streaming response of profiles.
	//
	//     The valid values are:
	//
	//     * `skip` (default): lists employee's profile url
	//     * `enrich`: lists full profile of employees
	//
	//     Calling this API endpoint with this parameter would add `1` credit per employee returned.
	//
	EnrichProfiles *string `form:"enrich_profiles,omitempty" json:"enrich_profiles,omitempty"`

	// RoleSearch
	//     Filter employees by their title by matching the employee's title against a *regular expression*.
	//
	//     The default value of this parameter is `null`.
	//
	//     The accepted value for this parameter is a **case-insensitive** regular expression.
	//
	//     (The base cost of calling this API endpoint with this parameter would be `10` credits.
	//     Each employee matched and returned would cost 3 extra credits.)
	//
	RoleSearch *string `form:"role_search,omitempty" json:"role_search,omitempty"`

	// PageSize
	//     Limit the maximum results returned per API call.
	//
	//     The default value of this parameter is `10`.
	//
	//     Accepted values for this parameter is an integer ranging from `1` to `200000`.
	//
	//     When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `10` and the default value is `10`.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// EmploymentStatus
	//     Parameter to tell the API to return past or current employees.
	//
	//     Valid values are `current`, `past`, and `all`:
	//
	//     * `current` (default) : lists current employees
	//     * `past` : lists past employees
	//     * `all` : lists current & past employees
	//
	EmploymentStatus *string `form:"employment_status,omitempty" json:"employment_status,omitempty"`

	// SortBy
	//     Sort employees by recency.
	//
	//     Valid values are:
	//     * `recently-joined` - Sort employees by their join date. The most recent employee is on the top of the list.
	//     * `recently-left` - Sort employees by their departure date. The most recent employee who had just left is on the top of this list.
	//     * `oldest` - Returns the oldest employees first. The oldest employee who had joined this company historically is on the top of this list.
	//     * `none` - The default value. Do not sort.
	//
	//     If this parameter is supplied with a value other than `none`, will add `50` credits to the base cost of the API endpoint regardless number of results returned. It will also add an additional cost of `10` credits per employee returned.
	//
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// ResolveNumericId
	//     Enable support for Company Profile URLs with numerical IDs that you most frequently fetch from Sales Navigator.
	//     We achieve this by resolving numerical IDs into vanity IDs with cached company profiles from [LinkDB](https://nubela.co/proxycurl/linkdb).
	//     For example, we will turn `https://www.linkedin.com/company/1234567890` to `https://www.linkedin.com/company/acme-corp` -- for which the API endpoint only supports the latter.
	//
	//     This parameter accepts the following values:
	//     - `false` (default value) - Will not resolve numerical IDs.
	//     - `true` - Enable support for Company Profile URLs with numerical IDs.
	//     Costs an extra `2` credit on top of the base cost of the endpoint.
	//
	ResolveNumericId *string `form:"resolve_numeric_id,omitempty" json:"resolve_numeric_id,omitempty"`

	// Url
	//     URL of the LinkedIn Company Profile to target.
	//
	//     URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`
	//
	Url string `form:"url" json:"url"`
}

// EmployeeCountEndpointParams defines parameters for EmployeeCountEndpoint.
type EmployeeCountEndpointParams struct {
	// UseCache
	//     `if-present`: The default behavior. Fetches data from LinkDB cache regardless of age of profile.
	//
	//     `if-recent`: API will make a best effort to return a fresh data no older than 29 days. Costs an extra 1 credit on top of the cost of the base endpoint.
	//
	UseCache *string `form:"use_cache,omitempty" json:"use_cache,omitempty"`

	// LinkedinEmployeeCount
	//     Option to include a scraped employee count value from the target company's LinkedIn profile.
	//
	//     Valid values are `include` and `exclude`:
	//
	//     * `exclude` (default) : To exclude the scraped employee count.
	//     * `include` : To include the scraped employee count.
	//
	//     Costs an extra `1` credit on top of the base cost of the endpoint.
	//
	LinkedinEmployeeCount *string `form:"linkedin_employee_count,omitempty" json:"linkedin_employee_count,omitempty"`

	// EmploymentStatus
	//     Parameter to tell the API to filter past or current employees.
	//
	//     Valid values are `current`, `past`, and `all`:
	//
	//     * `current` (default) : count current employees
	//     * `past` : count past employees
	//     * `all` : count current & past employees
	//
	EmploymentStatus *string `form:"employment_status,omitempty" json:"employment_status,omitempty"`

	// Url
	//     URL of the LinkedIn Company Profile to target.
	//
	//     URL should be in the format of `https://www.linkedin.com/company/<public_identifier>`
	//
	Url string `form:"url" json:"url"`
}

// CompanyProfilePictureEndpointParams defines parameters for CompanyProfilePictureEndpoint.
type CompanyProfilePictureEndpointParams struct {
	// LinkedinCompanyProfileUrl
	//     LinkedIn Profile URL of the company that you are trying to get the profile picture of.
	//
	LinkedinCompanyProfileUrl string `form:"linkedin_company_profile_url" json:"linkedin_company_profile_url"`
}

// CompanyLookupEndpointParams defines parameters for CompanyLookupEndpoint.
type CompanyLookupEndpointParams struct {
	// CompanyLocation
	//     The location / region of company.
	//     ISO 3166-1 alpha-2 codes
	//
	CompanyLocation *string `form:"company_location,omitempty" json:"company_location,omitempty"`

	// CompanyDomain Company website or Company domain
	// Requires either `company_domain` or `company_name`
	CompanyDomain *string `form:"company_domain,omitempty" json:"company_domain,omitempty"`

	// CompanyName Company Name
	// Requires either `company_domain` or `company_name`
	CompanyName *string `form:"company_name,omitempty" json:"company_name,omitempty"`

	// EnrichProfile
	//     Enrich the result with a cached profile of the lookup result.
	//
	//     The valid values are:
	//
	//     * `skip` (default): do not enrich the results with cached profile data
	//     * `enrich`: enriches the result with cached profile data
	//
	//     Calling this API endpoint with this parameter would add 1 credit.
	//
	//     If you require [fresh profile data](https://nubela.co/blog/how-fresh-are-profiles-returned-by-proxycurl-api/),
	//     please chain this API call with the [Company Profile Endpoint](https://nubela.co/proxycurl/docs#company-api-company-profile-endpoint) with the `use_cache=if-recent` parameter.
	//
	EnrichProfile *string `form:"enrich_profile,omitempty" json:"enrich_profile,omitempty"`
}

// JobProfileEndpointParams defines parameters for JobProfileEndpoint.
type JobProfileEndpointParams struct {
	// Url
	//     URL of the LinkedIn Job Profile to target.
	//
	//     URL should be in the format of
	//     `https://www.linkedin.com/jobs/view/<job_id>`.
	//     [Jobs Listing Endpoint](#jobs-api-jobs-listing-endpoint)
	//     can be used to retrieve a job URL.
	//
	Url string `form:"url" json:"url"`
}

// PersonProfilePictureEndpointParams defines parameters for PersonProfilePictureEndpoint.
type PersonProfilePictureEndpointParams struct {
	// LinkedinPersonProfileUrl
	//     LinkedIn Profile URL of the person that you are trying to get the profile picture of.
	//
	LinkedinPersonProfileUrl string `form:"linkedin_person_profile_url" json:"linkedin_person_profile_url"`
}

// WorkEmailLookupEndpointParams defines parameters for WorkEmailLookupEndpoint.
type WorkEmailLookupEndpointParams struct {
	// LinkedinProfileUrl
	//     Linkedin Profile URL of the person you want to
	//     extract work email address from.
	//
	LinkedinProfileUrl string `form:"linkedin_profile_url" json:"linkedin_profile_url"`

	// CallbackUrl
	//     Webhook to notify your application when
	//     the request has finished processing.
	//
	CallbackUrl *string `form:"callback_url,omitempty" json:"callback_url,omitempty"`
}

// PersonLookupEndpointParams defines parameters for PersonLookupEndpoint.
type PersonLookupEndpointParams struct {
	// SimilarityChecks
	//     Controls whether the API endpoint performs
	//     similarity comparisons between the input parameters
	//     and the results or simply returns the closest match.
	//     For instance, if you are searching for a person named
	//     "Ben Chad", and the closest result we have is "Chavvy
	//     Plum", our similarity checks will discard the obviously
	//     incorrect result and return `null` instead of a false
	//     positive.
	//
	//     Include similarity checks to eliminate false positives.
	//     However, be aware that this might yield fewer results
	//     as false positives are discarded. Credits will still be
	//     deducted even if we return `null`.
	//
	//     You can choose to skip similarity checks, in which
	//     case no credits will be charged if we return `null`.
	//
	//     This parameter accepts the following values:
	//     * `include` (default) - Perform similarity checks and
	//     discard false positives. Credits will be deducted even
	//     if we return null .
	//     * `skip` - Bypass similarity checks. No credits will be
	//     deducted if no results are returned.
	//
	SimilarityChecks *string `form:"similarity_checks,omitempty" json:"similarity_checks,omitempty"`

	// EnrichProfile
	//     Enrich the result with a cached profile of the lookup result.
	//
	//     The valid values are:
	//
	//     * `skip` (default): do not enrich the results with cached profile data
	//     * `enrich`: enriches the result with cached profile data
	//
	//     Calling this API endpoint with this parameter would add 1 credit.
	//
	//     If you require [fresh profile data](https://nubela.co/blog/how-fresh-are-profiles-returned-by-proxycurl-api/),
	//     please chain this API call with the [People Profile Endpoint](https://nubela.co/proxycurl/docs#people-api-person-profile-endpoint) with the `use_cache=if-recent` parameter.
	//
	EnrichProfile *string `form:"enrich_profile,omitempty" json:"enrich_profile,omitempty"`

	// CompanyDomain Company name or domain
	CompanyDomain string `form:"company_domain" json:"company_domain"`

	// Location
	//     The location of this user.
	//
	//     Name of country, city or state.
	//
	Location *string `form:"location,omitempty" json:"location,omitempty"`

	// Title Title that user is holding at his/her current job
	Title *string `form:"title,omitempty" json:"title,omitempty"`

	// LastName Last name of the user
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// FirstName First name of the user
	FirstName string `form:"first_name" json:"first_name"`
}

// ReverseEmailLookupEndpointParams defines parameters for ReverseEmailLookupEndpoint.
type ReverseEmailLookupEndpointParams struct {
	// Email Email address of the user you want to look up.
	// yes
	Email *string `form:"email,omitempty" json:"email,omitempty"`

	// LookupDepth
	//                 This parameter describes the depth options for our API lookup function. This endpoint can execute either a superficial or a deep lookup.
	//
	//                 A **superficial lookup** involves comparing the provided email with entries in our database. This approach tends to yield fewer results and is typically less effective for work-related email addresses. However, it does not consume any credits if no results are returned.
	//
	//                 On the other hand, a **deep lookup** extends beyond our database to utilize advanced heuristics and identify the individual associated with a given email. This method is particularly recommended for work emails.
	//
	//                 Please note the following valid values for the depth of the lookup:
	//
	//                 * `superficial`: No credits are consumed if no results are found.
	//                 * `deep` (default): Credits are used regardless of whether any results are returned.
	//
	// yes
	LookupDepth *string `form:"lookup_depth,omitempty" json:"lookup_depth,omitempty"`

	// EnrichProfile
	//                 Enrich the result with a cached LinkedIn profile of the LinkedIn Profile URL result (if any).
	//
	//                 Valid values are:
	//
	//                 * `skip` (default): do not enrich the results with cached profile data.
	//                 * `enrich`: enriches the result with cached profile data.
	//
	//                 Calling this API endpoint with this parameter would add `1` additional credit.
	//
	//                 If you require [fresh profile data](https://nubela.co/blog/how-fresh-are-profiles-returned-by-proxycurl-api/),  please chain this API call with the `linkedin_profile_url` result with the [Person Profile Endpoint](https://nubela.co/proxycurl/docs#people-api-person-profile-endpoint) with the `use_cache=if-recent` parameter.
	//
	// no
	EnrichProfile *string `form:"enrich_profile,omitempty" json:"enrich_profile,omitempty"`
}

// SchoolProfileEndpointParams defines parameters for SchoolProfileEndpoint.
type SchoolProfileEndpointParams struct {
	// Url
	//     URL of the LinkedIn School Profile to crawl.
	//
	//     URL should be in the format of `https://www.linkedin.com/school/<public_identifier>`
	//
	Url string `form:"url" json:"url"`

	// UseCache `if-present` The default behavior. Fetches profile from cache regardless of age of profile. If profile is not available in cache, API will attempt to source profile externally.
	//
	// `if-recent` API will make a best effort to return a fresh profile no older than 29 days.Costs an extra `1` credit on top of the cost of the base endpoint.
	UseCache *string `form:"use_cache,omitempty" json:"use_cache,omitempty"`
}

// StudentListingEndpointParams defines parameters for StudentListingEndpoint.
type StudentListingEndpointParams struct {
	// Country
	//     Limit the result set to the country locality of the profile. For example, set the parameter of `country=us` if you only want profiles from the US.
	//
	//     This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	//     Costs an extra `3` credit per result returned.
	//
	Country *string `form:"country,omitempty" json:"country,omitempty"`

	// EnrichProfiles
	//     Get the full profile of students instead of only their profile urls.
	//
	//     Each request respond with a streaming response of profiles.
	//
	//     The valid values are:
	//
	//     * `skip` (default): lists student's profile url
	//     * `enrich`: lists full profile of students
	//
	//     *Calling this API endpoint with this parameter would add `1` credit per student returned.*
	//
	EnrichProfiles *string `form:"enrich_profiles,omitempty" json:"enrich_profiles,omitempty"`

	// SearchKeyword
	//     Filter students by their major by matching the student's major against a *regular expression*.
	//
	//     The default value of this parameter is `null`.
	//
	//     The accepted value for this parameter is a **case-insensitive** regular expression.
	//
	//     (The base cost of calling this API endpoint with this parameter would be `10` credits.
	//     Each student matched and returned would cost `6` credits per student returned.)
	//
	SearchKeyword *string `form:"search_keyword,omitempty" json:"search_keyword,omitempty"`

	// PageSize
	//     Limit the maximum results returned per API call.
	//
	//     The default value of this parameter is `10`.
	//
	//     Accepted values for this parameter is an integer ranging from `1` to `200000`.
	//
	//     When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `10` and the default value is `10`.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// StudentStatus
	//     Parameter to tell the API to return past or current students.
	//
	//     Valid values are `current`, `past`, and `all`:
	//
	//     * `current` (default) : lists current students
	//     * `past` : lists past students
	//     * `all` : lists current & past students
	//
	StudentStatus *string `form:"student_status,omitempty" json:"student_status,omitempty"`

	// SortBy
	//     Sort students by matriculation or graduation dates.
	//
	//     Valid values are:
	//     * `recently-matriculated` - Sort students by their matriculation date. Students who had had most recently started school is on the top of the list.
	//     * `recently-graduated` - Sort students by their graduation date. The most recently graduated student is on the top of this list.
	//     * `none` - The default value. Do not sort.
	//
	//     If this parameter is supplied with a value other than `none`, will add `50` credits to the base cost of the API endpoint regardless number of results returned. It will also add an additional cost of `10` credits per student returned.
	//
	SortBy *string `form:"sort_by,omitempty" json:"sort_by,omitempty"`

	// ResolveNumericId
	//     Enable support for School Profile URLs with numerical IDs that you most frequently fetch from Sales Navigator.
	//     We achieve this by resolving numerical IDs into vanity IDs with cached company profiles from [LinkDB](https://nubela.co/proxycurl/linkdb).
	//     For example, we will turn `https://www.linkedin.com/school/1234567890` to `https://www.linkedin.com/school/acme-corp` -- for which the API endpoint only supports the latter.
	//
	//     This parameter accepts the following values:
	//     - `false` (default value) - Will not resolve numerical IDs.
	//     - `true` - Enable support for School Profile URLs with numerical IDs.
	//     Costs an extra `2` credit on top of the base cost of the endpoint.
	//
	ResolveNumericId *string `form:"resolve_numeric_id,omitempty" json:"resolve_numeric_id,omitempty"`

	// LinkedinSchoolUrl
	//     URL of the LinkedIn School Profile to target.
	//
	//     URL should be in the format of `https://www.linkedin.com/school/<public_identifier>`
	//
	LinkedinSchoolUrl string `form:"linkedin_school_url" json:"linkedin_school_url"`
}

// ReverseContactNumberLookupEndpointParams defines parameters for ReverseContactNumberLookupEndpoint.
type ReverseContactNumberLookupEndpointParams struct {
	// PhoneNumber [E.164 formatted](https://www.twilio.com/docs/glossary/what-e164) phone number of the person you want to identify social media profiles of.
	PhoneNumber string `form:"phone_number" json:"phone_number"`
}

// PersonProfileEndpointParams defines parameters for PersonProfileEndpoint.
type PersonProfileEndpointParams struct {
	// Extra
	//                     Enriches the Person Profile with extra details from external sources.
	//                     Extra details include gender, birth date, industry and interests.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide extra data field.
	//                     - `include` - Append extra data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	Extra *string `form:"extra,omitempty" json:"extra,omitempty"`

	// GithubProfileId
	//                     Enriches the Person Profile with Github Id from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide Github Id data field.
	//                     - `include` - Append Github Id data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	GithubProfileId *string `form:"github_profile_id,omitempty" json:"github_profile_id,omitempty"`

	// FacebookProfileId
	//                     Enriches the Person Profile with Facebook Id from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide Facebook Id data field.
	//                     - `include` - Append Facebook Id data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	FacebookProfileId *string `form:"facebook_profile_id,omitempty" json:"facebook_profile_id,omitempty"`

	// TwitterProfileId
	//                     Enriches the Person Profile with Twitter Id from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide Twitter Id data field.
	//                     - `include` - Append Twitter Id data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	TwitterProfileId *string `form:"twitter_profile_id,omitempty" json:"twitter_profile_id,omitempty"`

	// PersonalContactNumber
	//                     Enriches the Person Profile with personal numbers from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide personal numbers data field.
	//                     - `include` - Append personal numbers data to the person profile object.
	//                     Costs an extra `1` credit per email returned on top of the cost of the base endpoint (if data is available).
	//
	PersonalContactNumber *string `form:"personal_contact_number,omitempty" json:"personal_contact_number,omitempty"`

	// PersonalEmail
	//                     Enriches the Person Profile with personal emails from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide personal emails data field.
	//                     - `include` - Append personal emails data to the person profile object.
	//                     Costs an extra `1` credit per email returned on top of the cost of the base endpoint (if data is available).
	//
	PersonalEmail *string `form:"personal_email,omitempty" json:"personal_email,omitempty"`

	// InferredSalary
	//                     Include inferred salary range from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide inferred salary data field.
	//                     - `include` - Append inferred salary range data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	InferredSalary *string `form:"inferred_salary,omitempty" json:"inferred_salary,omitempty"`

	// Skills
	//                     Include skills data from external sources.
	//
	//                     This parameter accepts the following values:
	//                     - `exclude` (default value) - Does not provide skills data field.
	//                     - `include` - Append skills data to the person profile object.
	//                     Costs an extra `1` credit on top of the cost of the base endpoint (if data is available).
	//
	Skills *string `form:"skills,omitempty" json:"skills,omitempty"`

	// UseCache
	//                     `if-present` The default behavior.
	//                     Fetches profile from cache regardless of age of profile.
	//                     If profile is not available in cache, API will attempt to source profile externally.
	//
	//                     `if-recent` API will make a best effort to return a fresh profile no older than 29 days."
	//                     Costs an extra `1` credit on top of the cost of the base endpoint.
	//
	UseCache *string `form:"use_cache,omitempty" json:"use_cache,omitempty"`

	// FallbackToCache
	//                     Tweaks the fallback behavior if an error arises from fetching a fresh profile.
	//
	//                     This parameter accepts the following values:
	//                     * `on-error` (default value) - Fallback to reading the profile from cache if an error arises.
	//                     * `never` - Do not ever read profile from cache.
	//
	FallbackToCache *string `form:"fallback_to_cache,omitempty" json:"fallback_to_cache,omitempty"`

	// TwitterProfileUrl
	//                     The Twitter/X Profile URL from which you wish to extract person profile
	//
	//                     URL should be in the format of `https://x.com/<public-identifier>`
	//
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	TwitterProfileUrl *string `form:"twitter_profile_url,omitempty" json:"twitter_profile_url,omitempty"`

	// FacebookProfileUrl
	//                     The Facebook Profile URL from which you wish to extract person profile
	//
	//                     URL should be in the format of `https://facebook.com/<public-identifier>`
	//
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	FacebookProfileUrl *string `form:"facebook_profile_url,omitempty" json:"facebook_profile_url,omitempty"`

	// LinkedinProfileUrl
	//                     The LinkedIn Profile URL from which you wish to extract person profile
	//
	//                     URL should be in the format of `https://linkedin.com/in/<public-identifier>`
	//
	// yes (Include only one of: `linkedin_profile_url`, `twitter_profile_url`, or `facebook_profile_url`)
	LinkedinProfileUrl *string `form:"linkedin_profile_url,omitempty" json:"linkedin_profile_url,omitempty"`
}

// JobSearchEndpointParams defines parameters for JobSearchEndpoint.
type JobSearchEndpointParams struct {
	// JobType
	//     The nature of the job.
	//     It accepts the following 7 case-insensitive values only:
	//     - `full-time`
	//     - `part-time`
	//     - `contract`
	//     - `internship`
	//     - `temporary`
	//     - `volunteer`
	//     - `anything` (default)
	//
	JobType *string `form:"job_type,omitempty" json:"job_type,omitempty"`

	// ExperienceLevel
	//     The experience level needed for the job.
	//     It accepts the following 6 case-insensitive values only:
	//     - `internship`
	//     - `entry_level`
	//     - `associate`
	//     - `mid_senior_level`
	//     - `director`
	//     - `anything` (default)
	//
	ExperienceLevel *string `form:"experience_level,omitempty" json:"experience_level,omitempty"`

	// When
	//     The time when the job is posted,
	//     It accepts the following case-insensitive values only:
	//     - `yesterday`
	//     - `past-week`
	//     - `past-month`
	//     - `anytime` (default)
	//
	When *string `form:"when,omitempty" json:"when,omitempty"`

	// Flexibility
	//     The flexibility of the job.
	//     It accepts the following 3 case insensitive values only:
	//     - `remote`
	//     - `on-site`
	//     - `hybrid`
	//     - `anything` (default)
	//
	Flexibility *string `form:"flexibility,omitempty" json:"flexibility,omitempty"`

	// GeoId
	//     The `geo_id` of the location to search for.
	//     For example, `92000000` is the `geo_id` of world wide.
	//
	//     See [this article](https://nubela.co/blog/how-to-fetch-geo_id-parameter-for-the-job-api/?utm_source=blog&utm_medium=web&utm_campaign=docs-redirect-to-geo_id-article) as to how you may be able to match regions to `geo_id` input values.
	//
	GeoId *string `form:"geo_id,omitempty" json:"geo_id,omitempty"`

	// Keyword
	//     The keyword to search for.
	//
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`

	// SearchId
	//     The `search_id` of the company on LinkedIn.
	//     You can get the `search_id` of a LinkedIn company via
	//     [Company Profile API](#company-api-company-profile-endpoint).
	//
	SearchId *string `form:"search_id,omitempty" json:"search_id,omitempty"`
}

// JobsListingCountEndpointParams defines parameters for JobsListingCountEndpoint.
type JobsListingCountEndpointParams struct {
	// JobType
	//     The nature of the job.
	//     It accepts the following 7 case-insensitive values only:
	//     - `full-time`
	//     - `part-time`
	//     - `contract`
	//     - `internship`
	//     - `temporary`
	//     - `volunteer`
	//     - `anything` (default)
	//
	JobType *string `form:"job_type,omitempty" json:"job_type,omitempty"`

	// ExperienceLevel
	//     The experience level needed for the job.
	//     It accepts the following 6 case-insensitive values only:
	//     - `internship`
	//     - `entry_level`
	//     - `associate`
	//     - `mid_senior_level`
	//     - `director`
	//     - `anything` (default)
	//
	ExperienceLevel *string `form:"experience_level,omitempty" json:"experience_level,omitempty"`

	// When
	//     The time when the job is posted,
	//     It accepts the following case-insensitive values only:
	//     - `yesterday`
	//     - `past-week`
	//     - `past-month`
	//     - `anytime` (default)
	//
	When *string `form:"when,omitempty" json:"when,omitempty"`

	// Flexibility
	//     The flexibility of the job.
	//     It accepts the following 3 case insensitive values only:
	//     - `remote`
	//     - `on-site`
	//     - `hybrid`
	//     - `anything` (default)
	//
	Flexibility *string `form:"flexibility,omitempty" json:"flexibility,omitempty"`

	// GeoId
	//     The `geo_id` of the location to search for.
	//     For example, `92000000` is the `geo_id` of world wide.
	//
	//     See [this article](https://nubela.co/blog/how-to-fetch-geo_id-parameter-for-the-job-api/?utm_source=blog&utm_medium=web&utm_campaign=docs-redirect-to-geo_id-article) as to how you may be able to match regions to `geo_id` input values.
	//
	GeoId *string `form:"geo_id,omitempty" json:"geo_id,omitempty"`

	// Keyword
	//     The keyword to search for.
	//
	Keyword *string `form:"keyword,omitempty" json:"keyword,omitempty"`

	// SearchId
	//     The `search_id` of the company on LinkedIn.
	//     You can get the `search_id` of a LinkedIn company via
	//     [Company Profile API](#company-api-company-profile-endpoint).
	//
	SearchId *string `form:"search_id,omitempty" json:"search_id,omitempty"`
}

// CompanySearchEndpointParams defines parameters for CompanySearchEndpoint.
type CompanySearchEndpointParams struct {
	// Country
	//                 Filter companies with an office based in this country.
	//                 This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	Country *string `form:"country,omitempty" json:"country,omitempty"`

	// Region
	//                 Filter companies with an office based in this country.
	//                 This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	Region *string `form:"region,omitempty" json:"region,omitempty"`

	// City
	//                 Filter companies based in cities matching the provided search expression.
	//
	City *string `form:"city,omitempty" json:"city,omitempty"`

	// Type
	//                 Filter companies of the provided LinkedIn type.
	//
	//                 Possible values:
	//
	//                 * `EDUCATIONAL`: Educational Institution
	//                 * `GOVERNMENT_AGENCY`: Government Agency
	//                 * `NON_PROFIT` : Nonprofit
	//                 * `PARTNERSHIP` : Partnership
	//                 * `PRIVATELY_HELD` : Privately Held
	//                 * `PUBLIC_COMPANY` : Public Company
	//                 * `SELF_EMPLOYED` : Self-Employed
	//                 * `SELF_OWNED` : Sole Proprietorship
	//
	Type *string `form:"type,omitempty" json:"type,omitempty"`

	// FollowerCountMin
	//                 Filter companies with a LinkedIn follower count **more than** this value.
	//
	FollowerCountMin *string `form:"follower_count_min,omitempty" json:"follower_count_min,omitempty"`

	// FollowerCountMax
	//                 Filter companies with a LinkedIn follower count **less than** this value.
	//
	FollowerCountMax *string `form:"follower_count_max,omitempty" json:"follower_count_max,omitempty"`

	// Name
	//                 Filter companies with a name matching the provided search expression.
	//
	Name *string `form:"name,omitempty" json:"name,omitempty"`

	// Industry
	//                 Filter companies belonging to an `industry` that matches the provided search expression. The `industry` attribute, found in a LinkedIn Company profile, describes the industry in which the company operates. The value of this attribute is an enumerator. [This CSV file provides an exhaustive list of possible values for this attribute](https://drive.google.com/file/d/12yvYLuru7CRv3wKOIkHs5Ldocz31gJSS/view?usp=share_link).
	//
	Industry *string `form:"industry,omitempty" json:"industry,omitempty"`

	// EmployeeCountMax
	//                 Filter companies with **at most** this many employees.
	//
	EmployeeCountMax *string `form:"employee_count_max,omitempty" json:"employee_count_max,omitempty"`

	// EmployeeCountMin
	//                 Filter companies with **at least** this many employees.
	//
	EmployeeCountMin *string `form:"employee_count_min,omitempty" json:"employee_count_min,omitempty"`

	// Description
	//                 Filter companies with a description matching the provided search expression.
	//
	Description *string `form:"description,omitempty" json:"description,omitempty"`

	// FoundedAfterYear
	//                 Filter companies founded **after** this year.
	//
	FoundedAfterYear *string `form:"founded_after_year,omitempty" json:"founded_after_year,omitempty"`

	// FoundedBeforeYear
	//                 Filter companies founded **before** this year.
	//
	FoundedBeforeYear *string `form:"founded_before_year,omitempty" json:"founded_before_year,omitempty"`

	// FundingAmountMax
	//                 Filter companies that have raised **at most** this much (USD) funding amount.
	//
	FundingAmountMax *string `form:"funding_amount_max,omitempty" json:"funding_amount_max,omitempty"`

	// FundingAmountMin
	//                 Filter companies that have raised **at least** this much (USD) funding amount.
	//
	FundingAmountMin *string `form:"funding_amount_min,omitempty" json:"funding_amount_min,omitempty"`

	// FundingRaisedAfter
	//                 Filter companies that have raised funding **after** this date.
	//
	FundingRaisedAfter *string `form:"funding_raised_after,omitempty" json:"funding_raised_after,omitempty"`

	// FundingRaisedBefore
	//                 Filter companies that have raised funding **before** this date.
	//
	FundingRaisedBefore *string `form:"funding_raised_before,omitempty" json:"funding_raised_before,omitempty"`

	// PublicIdentifierInList
	//                 A list of public identifiers (the identifying portion of the company’s profile URL).
	//                 The target company’s identifier must be a member of this list.
	//
	PublicIdentifierInList *string `form:"public_identifier_in_list,omitempty" json:"public_identifier_in_list,omitempty"`

	// PublicIdentifierNotInList
	//                 A list of public identifiers (the identifying portion of the company’s profile URL).
	//                 The target company’s identifier must **not** be a member of this list.
	//
	PublicIdentifierNotInList *string `form:"public_identifier_not_in_list,omitempty" json:"public_identifier_not_in_list,omitempty"`

	// PageSize
	//                 Tune the maximum results returned per API call.
	//
	//                 The default value of this parameter is 100.
	//
	//                 Accepted values for this parameter is an integer ranging from 1 to 100.
	//
	//                 When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `10`.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// EnrichProfiles
	//                 Get the company's complete profile data rather than just the URLs to their LinkedIn profiles.
	//
	//                 Each request respond with a streaming response of profiles.
	//
	//                 The valid values are:
	//
	//                 - skip (default): lists company's profile url
	//                 - enrich: include company's profile data in the list
	//
	//                 Calling this API endpoint with this parameter would add 1 credit per result returned.
	//
	EnrichProfiles *string `form:"enrich_profiles,omitempty" json:"enrich_profiles,omitempty"`
}

// PersonSearchEndpointParams defines parameters for PersonSearchEndpoint.
type PersonSearchEndpointParams struct {
	// Country
	//                 Filter people located in this country.
	//                 This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	Country string `form:"country" json:"country"`

	// FirstName
	//                 Filter people whose first names match the provided search expression.
	//
	FirstName *string `form:"first_name,omitempty" json:"first_name,omitempty"`

	// LastName
	//                 Filter people whose last names match the provided search expression.
	//
	LastName *string `form:"last_name,omitempty" json:"last_name,omitempty"`

	// EducationFieldOfStudy
	//                 Filter people with a field of study matching the provided search expression, based on education history.
	//
	EducationFieldOfStudy *string `form:"education_field_of_study,omitempty" json:"education_field_of_study,omitempty"`

	// EducationDegreeName
	//                 Filter people who earned a degree matching the provided search expression, based on education history.
	//
	EducationDegreeName *string `form:"education_degree_name,omitempty" json:"education_degree_name,omitempty"`

	// EducationSchoolName
	//                 Filter people who have attended a school whose name matches the provided search expression, based on education history.
	//
	EducationSchoolName *string `form:"education_school_name,omitempty" json:"education_school_name,omitempty"`

	// EducationSchoolLinkedinProfileUrl
	//                 Filter people who have attended a school with a specific LinkedIn profile URL, based on education history.
	//
	EducationSchoolLinkedinProfileUrl *string `form:"education_school_linkedin_profile_url,omitempty" json:"education_school_linkedin_profile_url,omitempty"`

	// CurrentRoleTitle
	//                 Filter people who are **currently** working as a role whose title matches the provided search expression. You'll be looking for profiles on [LinkDB](https://nubela.co/proxycurl/linkdb) that show a person's current job. However, keep in mind that some of these profiles may not be up-to-date, which means you might sometimes see a person's old job instead of their current job on LinkedIn.
	//
	CurrentRoleTitle *string `form:"current_role_title,omitempty" json:"current_role_title,omitempty"`

	// PastRoleTitle
	//                 Filter people who have **in the past** worked as a role whose title matches the provided search expression.
	//
	PastRoleTitle *string `form:"past_role_title,omitempty" json:"past_role_title,omitempty"`

	// CurrentRoleBefore
	//                 Filter people who started their current role **before** this date. You'll be looking for profiles on [LinkDB](https://nubela.co/proxycurl/linkdb) that show a person's current job. However, keep in mind that some of these profiles may not be up-to-date, which means you might sometimes see a person's old job instead of their current job on LinkedIn.
	//
	//                 This parameter takes a ISO8601 date. Default value of this parameter is `null`.
	//
	CurrentRoleBefore *string `form:"current_role_before,omitempty" json:"current_role_before,omitempty"`

	// CurrentRoleAfter
	//                 Filter people who started their current role **after** this date. You'll be looking for profiles on [LinkDB](https://nubela.co/proxycurl/linkdb) that show a person's current job. However, keep in mind that some of these profiles may not be up-to-date, which means you might sometimes see a person's old job instead of their current job on LinkedIn.
	//
	//                 This parameter takes a ISO8601 date. Default value of this parameter is `null`.
	//
	CurrentRoleAfter *string `form:"current_role_after,omitempty" json:"current_role_after,omitempty"`

	// CurrentCompanyLinkedinProfileUrl
	//                 Filter people who are **currently** working at a company represented by this LinkedIn Company Profile URL.
	//
	//                 Default value of this parameter is `null`.
	//
	CurrentCompanyLinkedinProfileUrl *string `form:"current_company_linkedin_profile_url,omitempty" json:"current_company_linkedin_profile_url,omitempty"`

	// PastCompanyLinkedinProfileUrl
	//                 Filter people who have **in the past** worked at the company represented by this LinkedIn Company Profile URL.
	//
	//                 This parameter takes a LinkedIn Company Profile URL. Default value of this parameter is `null`.
	//
	PastCompanyLinkedinProfileUrl *string `form:"past_company_linkedin_profile_url,omitempty" json:"past_company_linkedin_profile_url,omitempty"`

	// CurrentJobDescription
	//                 Filter people with **current** job descriptions matching the provided search expression.
	//
	CurrentJobDescription *string `form:"current_job_description,omitempty" json:"current_job_description,omitempty"`

	// PastJobDescription
	//                 Filter people with **past** job descriptions matching the provided search expression.
	//
	PastJobDescription *string `form:"past_job_description,omitempty" json:"past_job_description,omitempty"`

	// CurrentCompanyName
	//                 Filter people who are **currently** working at a company whose name matches the provided search expression.
	//
	CurrentCompanyName *string `form:"current_company_name,omitempty" json:"current_company_name,omitempty"`

	// PastCompanyName
	//                 Filter people who **have previously** worked at a company whose name matches the provided search expression.
	//
	PastCompanyName *string `form:"past_company_name,omitempty" json:"past_company_name,omitempty"`

	// LinkedinGroups
	//                 Filter people who are members of LinkedIn groups whose names match the provided search expression.
	//
	LinkedinGroups *string `form:"linkedin_groups,omitempty" json:"linkedin_groups,omitempty"`

	// Languages
	//                 Filter people who list a language matching the provided search expression.
	//
	Languages *string `form:"languages,omitempty" json:"languages,omitempty"`

	// Region
	//                 Filter people located in a region matching the provided search expression.
	//                 A “region” in this context means “state,” “province,” or similar political division, depending on what country you’re querying.
	//
	Region *string `form:"region,omitempty" json:"region,omitempty"`

	// City
	//                 Filter people located in a city matching the provided search expression.
	//
	City *string `form:"city,omitempty" json:"city,omitempty"`

	// Headline
	//                 Filter people whose LinkedIn headline fields match the provided search expression.
	//
	Headline *string `form:"headline,omitempty" json:"headline,omitempty"`

	// Summary
	//                 Filter people whose LinkedIn summary fields match the provided search expression.
	//
	Summary *string `form:"summary,omitempty" json:"summary,omitempty"`

	// Industries
	//                 Person's inferred industry. May sometimes exist when `current_company_industry` does not, but `current_company_industry` should be preferred when it exists.
	//
	Industries *string `form:"industries,omitempty" json:"industries,omitempty"`

	// Interests
	//                 Filter people whose Linkedin interest fields match the provided search expression.
	//
	Interests *string `form:"interests,omitempty" json:"interests,omitempty"`

	// Skills
	//                 Filter people whose Linkedin skill fields match the provided search expression.
	//
	Skills *string `form:"skills,omitempty" json:"skills,omitempty"`

	// CurrentCompanyCountry
	//                 Filter people who are currently working at a company with an office based in this country.
	//
	//                 This parameter accepts a case-insensitive [Alpha-2 ISO3166 country code](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2).
	//
	CurrentCompanyCountry *string `form:"current_company_country,omitempty" json:"current_company_country,omitempty"`

	// CurrentCompanyRegion
	//                 Filter people who are currently working at a company based in a region matching the provided search expression.
	//
	CurrentCompanyRegion *string `form:"current_company_region,omitempty" json:"current_company_region,omitempty"`

	// CurrentCompanyCity
	//                 Filter people who are currently working at a company based in a city matching the provided search expression.
	//
	CurrentCompanyCity *string `form:"current_company_city,omitempty" json:"current_company_city,omitempty"`

	// CurrentCompanyType
	//                 Filter people who are currently working at a company of the provided LinkedIn type.
	//
	//                 Possible values:
	//
	//                 * `EDUCATIONAL`: Educational Institution
	//                 * `GOVERNMENT_AGENCY`: Government Agency
	//                 * `NON_PROFIT` : Nonprofit
	//                 * `PARTNERSHIP` : Partnership
	//                 * `PRIVATELY_HELD` : Privately Held
	//                 * `PUBLIC_COMPANY` : Public Company
	//                 * `SELF_EMPLOYED` : Self-Employed
	//                 * `SELF_OWNED` : Sole Proprietorship
	//
	CurrentCompanyType *string `form:"current_company_type,omitempty" json:"current_company_type,omitempty"`

	// CurrentCompanyFollowerCountMin
	//                 Filter people who are currently working at a company with a LinkedIn follower count **more than** this value.
	//
	CurrentCompanyFollowerCountMin *string `form:"current_company_follower_count_min,omitempty" json:"current_company_follower_count_min,omitempty"`

	// CurrentCompanyFollowerCountMax
	//                 Filter people who are currently working at a company with a LinkedIn follower count **less than** this value.
	//
	CurrentCompanyFollowerCountMax *string `form:"current_company_follower_count_max,omitempty" json:"current_company_follower_count_max,omitempty"`

	// CurrentCompanyIndustry
	//                 Filter people who are currently working at a company belonging to an `industry` that matches the provided search expression. The `industry` attribute, found in a LinkedIn Company profile, describes the industry in which the company operates. The value of this attribute is an enumerator. [This CSV file provides an exhaustive list of possible values for this attribute](https://drive.google.com/file/d/12yvYLuru7CRv3wKOIkHs5Ldocz31gJSS/view?usp=share_link).
	//
	CurrentCompanyIndustry *string `form:"current_company_industry,omitempty" json:"current_company_industry,omitempty"`

	// CurrentCompanyEmployeeCountMin
	//                 Filter people who are currently working at a company with **at least** this many employees.
	//
	CurrentCompanyEmployeeCountMin *string `form:"current_company_employee_count_min,omitempty" json:"current_company_employee_count_min,omitempty"`

	// CurrentCompanyEmployeeCountMax
	//                 Filter people who are currently working at a company with **at most** this many employees.
	//
	CurrentCompanyEmployeeCountMax *string `form:"current_company_employee_count_max,omitempty" json:"current_company_employee_count_max,omitempty"`

	// CurrentCompanyDescription
	//                 Filter people who are currently working at a company with a description matching the provided search expression.
	//
	CurrentCompanyDescription *string `form:"current_company_description,omitempty" json:"current_company_description,omitempty"`

	// CurrentCompanyFoundedAfterYear
	//                 Filter people who are currently working at a company that was founded **after** this year.
	//
	CurrentCompanyFoundedAfterYear *string `form:"current_company_founded_after_year,omitempty" json:"current_company_founded_after_year,omitempty"`

	// CurrentCompanyFoundedBeforeYear
	//                 Filter people who are currently working at a company that was founded **before** this year.
	//
	CurrentCompanyFoundedBeforeYear *string `form:"current_company_founded_before_year,omitempty" json:"current_company_founded_before_year,omitempty"`

	// CurrentCompanyFundingAmountMin
	//                 Filter people who are currently working at a company that has raised **at least** this much (USD) funding amount.
	//
	CurrentCompanyFundingAmountMin *string `form:"current_company_funding_amount_min,omitempty" json:"current_company_funding_amount_min,omitempty"`

	// CurrentCompanyFundingAmountMax
	//                 Filter people who are currently working at a company that has raised **at most** this much (USD) funding amount.
	//
	CurrentCompanyFundingAmountMax *string `form:"current_company_funding_amount_max,omitempty" json:"current_company_funding_amount_max,omitempty"`

	// CurrentCompanyFundingRaisedAfter
	//                 Filter people who are currently working at a company that has raised funding **after** this date.
	//
	CurrentCompanyFundingRaisedAfter *string `form:"current_company_funding_raised_after,omitempty" json:"current_company_funding_raised_after,omitempty"`

	// CurrentCompanyFundingRaisedBefore
	//                 Filter people who are currently working at a company that has raised funding **before** this date.
	//
	CurrentCompanyFundingRaisedBefore *string `form:"current_company_funding_raised_before,omitempty" json:"current_company_funding_raised_before,omitempty"`

	// PublicIdentifierInList
	//                 A list of public identifiers (the identifying portion of the person’s profile URL).
	//                 The target person’s identifier must be a member of this list.
	//
	PublicIdentifierInList *string `form:"public_identifier_in_list,omitempty" json:"public_identifier_in_list,omitempty"`

	// PublicIdentifierNotInList
	//                 A list of public identifiers (the identifying portion of the person’s profile URL).
	//                 The target person’s identifier must **not** be a member of this list.
	//
	PublicIdentifierNotInList *string `form:"public_identifier_not_in_list,omitempty" json:"public_identifier_not_in_list,omitempty"`

	// PageSize
	//                 Tune the maximum results returned per API call.
	//
	//                 The default value of this parameter is `100`.
	//
	//                 Accepted values for this parameter is an integer ranging from `1` to `100`.
	//
	//                 When `enrich_profiles=enrich`, this parameter accepts value ranging from `1` to `10`.
	//
	PageSize *string `form:"page_size,omitempty" json:"page_size,omitempty"`

	// EnrichProfiles
	//                 Get the person's complete profile data rather than just the URLs to their LinkedIn profiles.
	//
	//                 Each request respond with a streaming response of profiles.
	//
	//                 The valid values are:
	//
	//                 * `skip` (default): lists person's profile url only
	//                 * `enrich`: include person's profile data in the list
	//
	//                 Calling this API endpoint with this parameter would add `1` credit per result returned.
	//
	EnrichProfiles *string `form:"enrich_profiles,omitempty" json:"enrich_profiles,omitempty"`
}

// AsLinkedinCompanyCompanySize0 returns the union data inside the LinkedinCompany_CompanySize_Item as a LinkedinCompanyCompanySize0
func (t LinkedinCompany_CompanySize_Item) AsLinkedinCompanyCompanySize0() (LinkedinCompanyCompanySize0, error) {
	var body LinkedinCompanyCompanySize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkedinCompanyCompanySize0 overwrites any union data inside the LinkedinCompany_CompanySize_Item as the provided LinkedinCompanyCompanySize0
func (t *LinkedinCompany_CompanySize_Item) FromLinkedinCompanyCompanySize0(v LinkedinCompanyCompanySize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkedinCompanyCompanySize0 performs a merge with any union data inside the LinkedinCompany_CompanySize_Item, using the provided LinkedinCompanyCompanySize0
func (t *LinkedinCompany_CompanySize_Item) MergeLinkedinCompanyCompanySize0(v LinkedinCompanyCompanySize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinkedinCompanyCompanySize1 returns the union data inside the LinkedinCompany_CompanySize_Item as a LinkedinCompanyCompanySize1
func (t LinkedinCompany_CompanySize_Item) AsLinkedinCompanyCompanySize1() (LinkedinCompanyCompanySize1, error) {
	var body LinkedinCompanyCompanySize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkedinCompanyCompanySize1 overwrites any union data inside the LinkedinCompany_CompanySize_Item as the provided LinkedinCompanyCompanySize1
func (t *LinkedinCompany_CompanySize_Item) FromLinkedinCompanyCompanySize1(v LinkedinCompanyCompanySize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkedinCompanyCompanySize1 performs a merge with any union data inside the LinkedinCompany_CompanySize_Item, using the provided LinkedinCompanyCompanySize1
func (t *LinkedinCompany_CompanySize_Item) MergeLinkedinCompanyCompanySize1(v LinkedinCompanyCompanySize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkedinCompany_CompanySize_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkedinCompany_CompanySize_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsLinkedinSchoolCompanySize0 returns the union data inside the LinkedinSchool_CompanySize_Item as a LinkedinSchoolCompanySize0
func (t LinkedinSchool_CompanySize_Item) AsLinkedinSchoolCompanySize0() (LinkedinSchoolCompanySize0, error) {
	var body LinkedinSchoolCompanySize0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkedinSchoolCompanySize0 overwrites any union data inside the LinkedinSchool_CompanySize_Item as the provided LinkedinSchoolCompanySize0
func (t *LinkedinSchool_CompanySize_Item) FromLinkedinSchoolCompanySize0(v LinkedinSchoolCompanySize0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkedinSchoolCompanySize0 performs a merge with any union data inside the LinkedinSchool_CompanySize_Item, using the provided LinkedinSchoolCompanySize0
func (t *LinkedinSchool_CompanySize_Item) MergeLinkedinSchoolCompanySize0(v LinkedinSchoolCompanySize0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

// AsLinkedinSchoolCompanySize1 returns the union data inside the LinkedinSchool_CompanySize_Item as a LinkedinSchoolCompanySize1
func (t LinkedinSchool_CompanySize_Item) AsLinkedinSchoolCompanySize1() (LinkedinSchoolCompanySize1, error) {
	var body LinkedinSchoolCompanySize1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromLinkedinSchoolCompanySize1 overwrites any union data inside the LinkedinSchool_CompanySize_Item as the provided LinkedinSchoolCompanySize1
func (t *LinkedinSchool_CompanySize_Item) FromLinkedinSchoolCompanySize1(v LinkedinSchoolCompanySize1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeLinkedinSchoolCompanySize1 performs a merge with any union data inside the LinkedinSchool_CompanySize_Item, using the provided LinkedinSchoolCompanySize1
func (t *LinkedinSchool_CompanySize_Item) MergeLinkedinSchoolCompanySize1(v LinkedinSchoolCompanySize1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JsonMerge(t.union, b)
	t.union = merged
	return err
}

func (t LinkedinSchool_CompanySize_Item) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *LinkedinSchool_CompanySize_Item) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
